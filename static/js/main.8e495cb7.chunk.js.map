{"version":3,"sources":["services/auth/MicrosoftAuth.js","constants.js","services/drives/OneDrive.js","services/indexing/IndexFiles.js","services/indexing/IndexMovies.js","services/indexing/IndexShows.js","services/indexing/IndexSeasons.js","services/indexing/IndexEpisodes.js","services/databases/TMDb.js","services/Parametrize.js","services/fetching/FetchMovie.js","selectors/movies.js","actions/movies.js","services/fetching/FetchShow.js","selectors/shows.js","actions/shows.js","services/fetching/FetchSeason.js","selectors/seasons.js","actions/seasons.js","services/fetching/FetchEpisode.js","selectors/episodes.js","actions/episodes.js","actions/indexing.js","actions/auth.js","reducers/auth.js","reducers/indexing.js","reducers/episodes.js","reducers/index.js","reducers/movies.js","reducers/shows.js","reducers/seasons.js","store.js","serviceWorker.js","components/Cover.js","components/Item.js","components/ItemList.js","scenes/ForYou.js","components/PlyrPlayer/PlyrCaption.js","components/PlyrPlayer/PlyrSource.js","components/PlyrPlayer.js","scenes/Movies/Movie.js","scenes/Movies.js","scenes/Shows.js","scenes/Find.js","scenes/Welcome.js","scenes/NotFound.js","components/Loading.js","App.js","index.js"],"names":["MicrosoftAuth","Object","classCallCheck","this","_userAgentApplication","UserAgentApplication","config","clientID","_this","silentLogIn","then","accessToken","token","user","userAgentApplication","getUser","_this2","acquireTokenSilent","graphScopes","catch","popupLogIn","_this3","loginPopup","acquireTokenPopup","process","ITEM_STATES","ITEM_TYPES","FILE_TYPES","SOURCE_EXTENSIONS","CAPTION_EXTENSIONS","OneDrive","_client","Client","init","authProvider","done","client","api","get","itemId","concat","IndexFiles","oneDrive","folderId","_oneDrive","_folderId","children","response","value","map","item","index","filter","source","type","fileType","name","file","id","extension","fileExtension","information","fileInformation","mimeType","url","fileName","includes","split","pop","shift","IndexMovies","Promise","movies","movie","all","folder","perform","files","state","path","IndexShows","shows","show","IndexSeasons","showIds","_showIds","showId","performForShow","season","Number","isNaN","seasonNumber","parseInt","IndexEpisodes","seasonIds","_seasonIds","seasonId","performForSeason","episode","episodeNumber","rp","require","TMDb","query","rateLimiting","objectSpread","uri","base_uri","qs","results","length","resolve","setTimeout","api_key","language","headers","User-Agent","json","Parametrize","string","_string","toLowerCase","replace","FetchMovie","_movie","_tmdb","tmdb","findMovie","tmdbId","fetch","fetchDetails","fetchCredits","getPosterColor","backdropUrl","backdrop_path","overview","posterUrl","poster_path","releaseDate","release_date","runtime","title","trailerLink","movieCredits","cast","cast_member","character","crew","crew_member","job","_this4","analyze","scale","result","posterColor","color","moviesSelector","fetchMovie","dispatch","getState","createSelector","movieSelector","fetchedMovie","updateMovie","payload","FetchShow","_show","findShow","firstAirDate","first_air_date","lastAirDate","last_air_date","showsSelector","showSelector","updateShow","FetchSeason","showTmdbId","showName","_season","airDate","air_date","seasonCredits","seasonsSelector","seasons","seasonSelector","updateSeason","FetchEpisode","seasonName","_episode","episodesSelector","episodes","fetchEpisode","episodeSelector","fetchedEpisode","updateEpisode","indexBegin","auth","forEach","ids","keys","removeMovie","fetchShow","fetchedShow","removeShow","fetchSeason","fetchedSeason","removeSeason","removeEpisode","indexSuccess","error","indexFailure","statusCode","logIn","logInBegin","logInSuccess","logInFailure","initialState","loading","rootReducer","combineReducers","persistReducer","key","storage","whitelist","debug","arguments","undefined","action","indexing","objectWithoutProperties","_toPropertyKey","defineProperty","shows_toPropertyKey","seasons_toPropertyKey","episodes_toPropertyKey","createStore","persistedReducer","applyMiddleware","thunk","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","Cover","react_default","a","createElement","className","style","height","props","width","progress","src","alt","--box-shadow-color","Component","Item","react_router_dom","to","src_components_Cover","ItemList","items","components_Item","itemHeight","itemWidth","ForYou","components_ItemList","values","connect","PlyrCaption","kind","label","caption","srcLang","srclang","default","PlyrSource","size","PlyrPlayer","document","querySelector","player","Plyr","on","display","event","detail","plyr","currentTime","crossOrigin","playsInline","controls","PlyrPlayer_PlyrSource","PlyrPlayer_PlyrCaption","href","download","Movie","src_components_PlyrPlayer","params","Movies","react_router","component","exact","render","Shows","Find","Welcome","NotFound","Loading","App","possibleConstructorReturn","getPrototypeOf","call","components_Loading","onClick","ReactDOM","es","store","integration_react","persistor","persistStore","src_App","getElementById","URL","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8e495cb7.chunk.js","sourcesContent":["import { UserAgentApplication } from 'msal'\n\nclass MicrosoftAuth {\n  static config = {\n    clientID: process.env.REACT_APP_MICROSOFT_CLIENT_ID,\n    graphScopes: ['user.read', 'files.read.all']\n  }\n\n  constructor() {\n    this._userAgentApplication = new UserAgentApplication(\n      MicrosoftAuth.config.clientID,\n      'https://login.microsoftonline.com/common',\n      null\n    )\n  }\n\n  perform() {\n    return this.silentLogIn().then(accessToken => {\n      return {\n        token: accessToken,\n        user: this.userAgentApplication.getUser()\n      }\n    })\n  }\n\n  silentLogIn() {\n    return this.userAgentApplication.acquireTokenSilent(MicrosoftAuth.config.graphScopes).then(accessToken => {\n      return accessToken\n    }).catch(() => this.popupLogIn())\n  }\n\n  popupLogIn() {\n    return this.userAgentApplication.loginPopup(MicrosoftAuth.config.graphScopes).then(() => {\n      return this.userAgentApplication.acquireTokenSilent(MicrosoftAuth.config.graphScopes).then(accessToken => {\n        return accessToken\n      }).catch(() => {\n        return this.userAgentApplication.acquireTokenPopup(MicrosoftAuth.config.graphScopes).then(accessToken => {\n          return accessToken\n        })\n      })\n    })\n  }\n\n  get userAgentApplication() {\n    return this._userAgentApplication\n  }\n}\n\nexport default MicrosoftAuth\n","export const ITEM_STATES = {\n  INDEXED: 'indexed',\n  FETCHED: 'fetched'\n}\n\nexport const ITEM_TYPES = {\n  MOVIE: 'movie',\n  SHOW: 'show',\n  SEASON: 'season',\n  EPISODE: 'episode'\n}\n\nexport const FILE_TYPES = {\n  SOURCE: 'source',\n  CAPTION: 'caption'\n}\n\nexport const SOURCE_EXTENSIONS = ['mp4', 'm4v', 'mkv', 'webm']\nexport const CAPTION_EXTENSIONS = ['vtt']\n","import { Client } from '@microsoft/microsoft-graph-client'\n\nclass OneDrive {\n  constructor(accessToken) {\n    this._client = Client.init({\n      authProvider: done => done(null, accessToken)\n    })\n  }\n\n  movies() {\n    return this.client.api('/me/drive/root:/Plaain/Movies:/children').get()\n  }\n\n  shows() {\n    return this.client.api('/me/drive/root:/Plaain/Shows:/children').get()\n  }\n\n  children(itemId) {\n    return this.client.api(`/me/drive/items/${itemId}/children`).get()\n  }\n\n  get client() {\n    return this._client\n  }\n}\n\nexport default OneDrive\n","import { FILE_TYPES, SOURCE_EXTENSIONS, CAPTION_EXTENSIONS } from '../../constants'\n\nclass IndexFiles {\n  constructor(oneDrive, folderId) {\n    this._oneDrive = oneDrive\n    this._folderId = folderId\n  }\n\n  perform() {\n    return this.oneDrive.children(this.folderId).then(response => {\n      return response.value.map(item => this.index(item)).filter(source => source != null)\n    })\n  }\n\n  index(item) {\n    const type = IndexFiles.fileType(item.name)\n    if (item.file == null || type == null) {\n      return null\n    }\n\n    return {\n      id: item.id,\n      type: type,\n      name: item.name,\n      extension: IndexFiles.fileExtension(item.name),\n      information: IndexFiles.fileInformation(item.name),\n      mimeType: item.file.mimeType,\n      url: item['@microsoft.graph.downloadUrl']\n    }\n  }\n\n  static fileType(fileName) {\n    if (SOURCE_EXTENSIONS.includes(IndexFiles.fileExtension(fileName))) {\n      return FILE_TYPES.SOURCE\n    } else if (CAPTION_EXTENSIONS.includes(IndexFiles.fileExtension(fileName))) {\n      return FILE_TYPES.CAPTION\n    } else {\n      return null\n    }\n  }\n\n  static fileExtension(fileName) {\n    return fileName.split('.').pop()\n  }\n\n  static fileInformation(fileName) {\n    return fileName.split('.').shift()\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n\n  get folderId() {\n    return this._folderId\n  }\n}\n\nexport default IndexFiles\n","import { ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport OneDrive from '../drives/OneDrive'\n\nimport IndexFiles from './IndexFiles'\n\nclass IndexMovies {\n  constructor(accessToken) {\n    this._oneDrive = new OneDrive(accessToken)\n  }\n\n  async perform() {\n    return await Promise.all(await this.oneDrive.movies().then(response => {\n      return response.value.map(item => this.index(item))\n    })).then(movies => movies.filter(movie => movie != null))\n  }\n\n  async index(item) {\n    if (item.folder == null) {\n      return null\n    }\n\n    const files = await new IndexFiles(this.oneDrive, item.id).perform()\n\n    return {\n      type: ITEM_TYPES.MOVIE,\n      state: ITEM_STATES.INDEXED,\n      id: item.id,\n      name: item.name,\n      path: `/movies/${item.id}`,\n      files: files\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n}\n\nexport default IndexMovies\n","import { ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport OneDrive from '../drives/OneDrive'\n\nclass IndexShows {\n  constructor(accessToken) {\n    this._oneDrive = new OneDrive(accessToken)\n  }\n\n  async perform() {\n    return await Promise.all(await this.oneDrive.shows().then(response => {\n      return response.value.map(item => this.index(item))\n    })).then(shows => shows.filter(show => show != null))\n  }\n\n  async index(item) {\n    if (item.folder == null) {\n      return null\n    }\n\n    return {\n      type: ITEM_TYPES.SHOW,\n      state: ITEM_STATES.INDEXED,\n      id: item.id,\n      name: item.name,\n      path: `/shows/${item.id}`\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n}\n\nexport default IndexShows\n","import { ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport OneDrive from '../drives/OneDrive'\n\nclass IndexSeasons {\n  constructor(accessToken, showIds) {\n    this._oneDrive = new OneDrive(accessToken)\n    this._showIds = showIds\n  }\n\n  async perform() {\n    return [].concat(...await Promise.all(this.showIds.map(showId => this.performForShow(showId)).filter(season => season != null)))\n  }\n\n  async performForShow(showId) {\n    return await Promise.all(await this.oneDrive.children(showId).then(response => {\n      return response.value.map(item => this.index(item, showId))\n    }))\n  }\n\n  async index(item, showId) {\n    if (item.folder == null || Number.isNaN(item.name)) {\n      return null\n    }\n\n    const seasonNumber = Number.parseInt(item.name)\n\n    return {\n      type: ITEM_TYPES.SEASON,\n      state: ITEM_STATES.INDEXED,\n      id: item.id,\n      seasonNumber: seasonNumber,\n      showId,\n      path: `/seasons/${seasonNumber}`\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n\n  get showIds() {\n    return this._showIds\n  }\n}\n\nexport default IndexSeasons\n","import { ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport OneDrive from '../drives/OneDrive'\n\nimport IndexFiles from './IndexFiles'\n\nclass IndexEpisodes {\n  constructor(accessToken, seasonIds) {\n    this._oneDrive = new OneDrive(accessToken)\n    this._seasonIds = seasonIds\n  }\n\n  async perform() {\n    return [].concat(...await Promise.all(this.seasonIds.map(seasonId => this.performForSeason(seasonId)).filter(episode => episode != null)))\n  }\n\n  async performForSeason(seasonId) {\n    return await Promise.all(await this.oneDrive.children(seasonId).then(response => {\n      return response.value.map(item => this.index(item, seasonId))\n    }))\n  }\n\n  async index(item, seasonId) {\n    if (item.folder == null || Number.isNaN(item.name)) {\n      return null\n    }\n\n    const episodeNumber = Number.parseInt(item.name)\n    const files = await new IndexFiles(this.oneDrive, item.id).perform()\n\n    return {\n      type: ITEM_TYPES.EPISODE,\n      state: ITEM_STATES.INDEXED,\n      id: item.id,\n      episodeNumber: episodeNumber,\n      files: files,\n      seasonId,\n      path: `/episodes/${episodeNumber}`\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n\n  get seasonIds() {\n    return this._seasonIds\n  }\n}\n\nexport default IndexEpisodes\n","const rp = require('request-promise')\n\nclass TMDb {\n  static config = {\n    qs: {\n      api_key: process.env.REACT_APP_TMDB_API_KEY,\n      language: 'en-US'\n    },\n    headers: {\n      'User-Agent': 'Request-Promise'\n    },\n    json: true\n  }\n\n  static base_uri = 'https://api.themoviedb.org/3'\n\n  async findMovie(query) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/search/movie`, qs: {...TMDb.config.qs, query}}).then(response => {\n      if (response.results.length < 1) {\n        return null\n      }\n\n      return response.results[0].id\n    })\n  }\n\n  async findShow(query) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/search/tv`, qs: {...TMDb.config.qs, query}}).then(response => {\n      if (response.results.length < 1) {\n        return null\n      }\n\n      return response.results[0].id\n    })\n  }\n\n  async movie(id) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/movie/${id}`})\n  }\n\n  async movieCredits(id) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/movie/${id}/credits`})\n  }\n\n  async show(id) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${id}`})\n  }\n\n  async season(showId, seasonNumber) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${showId}/season/${seasonNumber}`})\n  }\n\n  async seasonCredits(showId, seasonNumber) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${showId}/season/${seasonNumber}/credits`})\n  }\n\n  async episode(showId, seasonNumber, episodeNumber) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${showId}/season/${seasonNumber}/episode/${episodeNumber}`})\n  }\n\n  // TMDb only allows for up to 4 requests per second (https://developers.themoviedb.org/3/getting-started/request-rate-limiting)\n  static async rateLimiting() {\n    await new Promise(resolve => setTimeout(resolve, 250))\n  }\n}\n\nexport default TMDb\n","class Parametrize {\n  constructor(string) {\n    this._string = string\n  }\n\n  perform() {\n    return this.string.toLowerCase().replace(/\\s/g, '+')\n  }\n\n  get string() {\n    return this._string\n  }\n}\n\nexport default Parametrize\n","import analyze from 'rgbaster'\n\nimport { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\nimport Parametrize from '../Parametrize'\n\nclass FetchMovie {\n  constructor(id, name) {\n    this._movie = { id, name }\n    this._tmdb = new TMDb()\n  }\n\n  perform() {\n    return this.tmdb.findMovie(this.movie.name).then(tmdbId => this.fetch(tmdbId))\n  }\n\n  async fetch(tmdbId) {\n    this.movie.tmdbId = tmdbId\n\n    await Promise.all([\n      this.fetchDetails(),\n      this.fetchCredits()\n    ])\n    await this.getPosterColor()\n\n    return this.movie\n  }\n\n  fetchDetails() {\n    return this.tmdb.movie(this.movie.tmdbId)\n      .then(response => {\n        this.movie.state = ITEM_STATES.FETCHED\n        this.movie.backdropUrl = `https://image.tmdb.org/t/p/original${response.backdrop_path}`\n        this.movie.overview = response.overview\n        this.movie.posterUrl = `https://image.tmdb.org/t/p/original${response.poster_path}`\n        this.movie.releaseDate = response.release_date\n        this.movie.runtime = response.runtime\n        this.movie.name = response.title\n        this.movie.trailerLink = `https://www.youtube.com/results?search_query=${new Parametrize(this.movie.name).perform()}+official+trailer`\n      })\n  }\n\n  fetchCredits() {\n    return this.tmdb.movieCredits(this.movie.tmdbId)\n      .then(response => {\n        this.movie.cast = response.cast.map(cast_member => ({\n          character: cast_member.character,\n          name: cast_member.name\n        }))\n        this.movie.crew = response.crew.map(crew_member => ({\n          job: crew_member.job,\n          name: crew_member.name\n        }))\n      })\n  }\n\n  getPosterColor() {\n    return analyze(this.movie.posterUrl, { scale: 0.1 }).then(result => {\n      this.movie.posterColor = result[0].color\n    })\n  }\n\n  get movie() {\n    return this._movie\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n}\n\nexport default FetchMovie\n","import { createSelector } from 'reselect'\n\nconst moviesSelector = state => state.movies\n\nexport const movieSelector = id => {\n  return createSelector(\n    moviesSelector,\n    movies => movies[id]\n  )\n}\n","import FetchMovie from '../services/fetching/FetchMovie'\n\nimport { movieSelector } from '../selectors/movies'\n\nexport const REMOVE_MOVIE = 'REMOVE_MOVIE'\nexport const UPDATE_MOVIE = 'UPDATE_MOVIE'\n\nexport const fetchMovie = id => {\n  return (dispatch, getState) => {\n    const movie = movieSelector(id)(getState())\n    new FetchMovie(movie.id, movie.name).perform().then(fetchedMovie => {\n      dispatch(updateMovie(fetchedMovie))\n    }).catch(() => dispatch(fetchMovie(id)))\n  }\n}\n\nexport const removeMovie = id => ({\n  type: REMOVE_MOVIE,\n  payload: id\n})\n\nexport const updateMovie = movie => ({\n  type: UPDATE_MOVIE,\n  payload: movie\n})\n","import analyze from 'rgbaster'\n\nimport { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\n\nclass FetchShow {\n  constructor(id, name) {\n    this._show = { id, name }\n    this._tmdb = new TMDb()\n  }\n\n  perform() {\n    return this.tmdb.findShow(this.show.name).then(tmdbId => this.fetch(tmdbId))\n  }\n\n  async fetch(tmdbId) {\n    this.show.tmdbId = tmdbId\n\n    await Promise.all([\n      this.fetchDetails()\n    ])\n    await this.getPosterColor()\n\n    return this.show\n  }\n\n  fetchDetails() {\n    return this.tmdb.show(this.show.tmdbId)\n      .then(response => {\n        this.show.state = ITEM_STATES.FETCHED\n        this.show.backdropUrl = `https://image.tmdb.org/t/p/original${response.backdrop_path}`\n        this.show.firstAirDate = response.first_air_date\n        this.show.lastAirDate = response.last_air_date\n        this.show.name = response.name\n        this.show.overview = response.overview\n        this.show.posterUrl = `https://image.tmdb.org/t/p/original${response.poster_path}`\n      })\n  }\n\n  getPosterColor() {\n    return analyze(this.show.posterUrl, { scale: 0.1 }).then(result => {\n      this.show.posterColor = result[0].color\n    })\n  }\n\n  get show() {\n    return this._show\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n}\n\nexport default FetchShow\n","import { createSelector } from 'reselect'\n\nconst showsSelector = state => state.shows\n\nexport const showSelector = id => {\n  return createSelector(\n    showsSelector,\n    shows => shows[id]\n  )\n}\n","import FetchShow from '../services/fetching/FetchShow'\n\nimport { showSelector } from '../selectors/shows'\n\nexport const REMOVE_SHOW = 'REMOVE_SHOW'\nexport const UPDATE_SHOW = 'UPDATE_SHOW'\n\nexport const fetchShow = id => {\n  return (dispatch, getState) => {\n    const show = showSelector(id)(getState())\n    new FetchShow(show.id, show.name).perform().then(fetchedShow => {\n      dispatch(updateShow(fetchedShow))\n    }).catch(() => dispatch(fetchShow(id)))\n  }\n}\n\nexport const removeShow = id => ({\n  type: REMOVE_SHOW,\n  payload: id\n})\n\nexport const updateShow = show => ({\n  type: UPDATE_SHOW,\n  payload: show\n})\n","import analyze from 'rgbaster'\n\nimport { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\nimport Parametrize from '../Parametrize'\n\nclass FetchSeason {\n  constructor(showTmdbId, showName, id, seasonNumber) {\n    this._show = { tmdbId: showTmdbId, name: showName }\n    this._season = { id, seasonNumber }\n    this._tmdb = new TMDb()\n  }\n\n  async perform() {\n    await Promise.all([\n      this.fetchDetails(),\n      this.fetchCredits()\n    ])\n    await this.getPosterColor()\n\n    return this.season\n  }\n\n  fetchDetails() {\n    return this.tmdb.season(this.show.tmdbId, this.season.seasonNumber)\n      .then(response => {\n        this.season.state = ITEM_STATES.FETCHED\n        this.season.airDate = response.air_date\n        this.season.name = response.name\n        this.season.overview = response.overview\n        this.season.posterUrl = `https://image.tmdb.org/t/p/original${response.poster_path}`\n        this.season.trailerLink = `https://www.youtube.com/results?search_query=${new Parametrize(this.show.name).perform()}+${new Parametrize(this.season.name).perform()}+official+trailer&i=movies-tv`\n      })\n  }\n\n  fetchCredits() {\n    return this.tmdb.seasonCredits(this.show.tmdbId, this.season.seasonNumber)\n      .then(response => {\n        this.season.cast = response.cast.map(cast_member => ({\n          character: cast_member.character,\n          name: cast_member.name\n        }))\n        this.season.crew = response.crew.map(crew_member => ({\n          job: crew_member.job,\n          name: crew_member.name\n        }))\n      })\n  }\n\n  getPosterColor() {\n    return analyze(this.season.posterUrl, { scale: 0.1 }).then(result => {\n      this.season.posterColor = result[0].color\n    })\n  }\n\n  get show() {\n    return this._show\n  }\n\n  get season() {\n    return this._season\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n}\n\nexport default FetchSeason\n","import { createSelector } from 'reselect'\n\nconst seasonsSelector = state => state.seasons\n\nexport const seasonSelector = id => {\n  return createSelector(\n    seasonsSelector,\n    seasons => seasons[id]\n  )\n}\n","import FetchSeason from '../services/fetching/FetchSeason'\n\nimport { seasonSelector } from '../selectors/seasons'\nimport { showSelector } from '../selectors/shows'\n\nexport const REMOVE_SEASON = 'REMOVE_SEASON'\nexport const UPDATE_SEASON = 'UPDATE_SEASON'\n\nexport const fetchSeason = id => {\n  return (dispatch, getState) => {\n    const season = seasonSelector(id)(getState())\n    const show = showSelector(season.showId)(getState())\n    new FetchSeason(show.tmdbId, show.name, season.id, season.seasonNumber).perform().then(fetchedSeason => {\n      dispatch(updateSeason(fetchedSeason))\n    }).catch(() => dispatch(fetchSeason(id)))\n  }\n}\n\nexport const removeSeason = id => ({\n  type: REMOVE_SEASON,\n  payload: id\n})\n\nexport const updateSeason = season => ({\n  type: UPDATE_SEASON,\n  payload: season\n})\n","import { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\n\nclass FetchEpisode {\n  constructor(showTmdbId, showName, seasonNumber, seasonName, id, episodeNumber) {\n    this._show = { tmdbId: showTmdbId, name: showName }\n    this._season = { seasonNumber, name: seasonName }\n    this._episode = { id, episodeNumber }\n    this._tmdb = new TMDb()\n  }\n\n  async perform() {\n    await Promise.all([\n      this.fetchDetails()\n    ])\n\n    return this.episode\n  }\n\n  fetchDetails() {\n    return this.tmdb.episode(this.show.tmdbId, this.season.seasonNumber, this.episode.episodeNumber)\n      .then(response => {\n        this.episode.state = ITEM_STATES.FETCHED\n        this.episode.airDate = response.air_date\n        this.episode.name = response.name\n        this.episode.overview = response.overview\n      })\n  }\n\n  get show() {\n    return this._show\n  }\n\n  get season() {\n    return this._season\n  }\n\n  get episode() {\n    return this._episode\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n}\n\nexport default FetchEpisode\n","import { createSelector } from 'reselect'\n\nconst episodesSelector = state => state.episodes\n\nexport const episodeSelector = id => {\n  return createSelector(\n    episodesSelector,\n    episodes => episodes[id]\n  )\n}\n","import FetchEpisode from '../services/fetching/FetchEpisode'\n\nimport { episodeSelector } from '../selectors/episodes'\nimport { seasonSelector } from '../selectors/seasons'\nimport { showSelector } from '../selectors/shows'\n\nexport const REMOVE_EPISODE = 'REMOVE_EPISODE'\nexport const UPDATE_EPISODE = 'UPDATE_EPISODE'\n\nexport const fetchEpisode = id => {\n  return (dispatch, getState) => {\n    const episode = episodeSelector(id)(getState())\n    const season = seasonSelector(episode.seasonId)(getState())\n    const show = showSelector(season.showId)(getState())\n    new FetchEpisode(show.tmdbId, show.name, season.seasonNumber, season.name, episode.id, episode.episodeNumber).perform().then(fetchedEpisode => {\n      dispatch(updateEpisode(fetchedEpisode))\n    }).catch(() => dispatch(fetchEpisode(id)))\n  }\n}\n\nexport const removeEpisode = id => ({\n  type: REMOVE_EPISODE,\n  payload: id\n})\n\nexport const updateEpisode = episode => ({\n  type: UPDATE_EPISODE,\n  payload: episode\n})\n","import IndexMovies from '../services/indexing/IndexMovies'\nimport IndexShows from '../services/indexing/IndexShows'\nimport IndexSeasons from '../services/indexing/IndexSeasons'\nimport IndexEpisodes from '../services/indexing/IndexEpisodes'\n\nimport { logIn } from './auth'\nimport { fetchMovie, removeMovie, updateMovie } from './movies'\nimport { fetchShow, removeShow, updateShow } from './shows'\nimport { fetchSeason, removeSeason, updateSeason } from './seasons'\nimport { fetchEpisode, removeEpisode, updateEpisode } from './episodes'\n\nexport const INDEX_BEGIN = 'INDEX_BEGIN'\nexport const INDEX_SUCCESS = 'INDEX_SUCCESS'\nexport const INDEX_FAILURE = 'INDEX_FAILURE'\n\nexport const index = () => {\n  return (dispatch, getState) => {\n    dispatch(indexBegin())\n\n    new IndexMovies(getState().auth.token).perform().then(movies => {\n      movies.forEach(movie => {\n        dispatch(updateMovie(movie))\n        dispatch(fetchMovie(movie.id))\n      })\n      const ids = movies.map(movie => movie.id)\n      Object.keys(getState().movies).forEach(id => {\n        if (!ids.includes(id)) {\n          dispatch(removeMovie(id))\n        }\n      })\n    }).then(() => {\n      return new IndexShows(getState().auth.token).perform()\n    }).then(shows => {\n      shows.forEach(show => {\n        dispatch(updateShow(show))\n        dispatch(fetchShow(show.id))\n      })\n      const ids = shows.map(show => show.id)\n      Object.keys(getState().shows).forEach(id => {\n        if (!ids.includes(id)) {\n          dispatch(removeShow(id))\n        }\n      })\n    }).then(() => {\n      return new IndexSeasons(getState().auth.token, Object.keys(getState().shows)).perform()\n    }).then(seasons => {\n      seasons.forEach(season => {\n        dispatch(updateSeason(season))\n        dispatch(fetchSeason(season.id))\n      })\n      const ids = seasons.map(season => season.id)\n      Object.keys(getState().seasons).forEach(id => {\n        if (!ids.includes(id)) {\n          dispatch(removeSeason(id))\n        }\n      })\n    }).then(() => {\n      return new IndexEpisodes(getState().auth.token, Object.keys(getState().seasons)).perform()\n    }).then(episodes => {\n      episodes.forEach(episode => {\n        dispatch(updateEpisode(episode))\n        dispatch(fetchEpisode(episode.id))\n      })\n      const ids = episodes.map(episode => episode.id)\n      Object.keys(getState().episodes).forEach(id => {\n        if (!ids.includes(id)) {\n          dispatch(removeEpisode(id))\n        }\n      })\n    }).then(() => {\n      dispatch(indexSuccess())\n    }).catch(error => {\n      dispatch(indexFailure(error))\n\n      if (error.statusCode === 401) {\n        dispatch(logIn())\n      }\n    })\n  }\n}\n\nconst indexBegin = () => ({\n  type: INDEX_BEGIN\n})\n\nconst indexSuccess = () => ({\n  type: INDEX_SUCCESS\n})\n\nconst indexFailure = error => ({\n  type: INDEX_FAILURE,\n  payload: error\n})\n","import MicrosoftAuth from '../services/auth/MicrosoftAuth'\n\nimport { index } from './indexing'\n\nexport const LOG_IN_BEGIN = 'LOG_IN_BEGIN'\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'\n\nexport const logIn = () => {\n  return dispatch => {\n    dispatch(logInBegin())\n\n    new MicrosoftAuth().perform().then(auth => {\n      dispatch(logInSuccess(auth))\n      dispatch(index())\n    }).catch(error => dispatch(logInFailure(error)))\n  }\n}\n\nconst logInBegin = () => ({\n  type: LOG_IN_BEGIN\n})\n\nconst logInSuccess = auth => ({\n  type: LOG_IN_SUCCESS,\n  payload: auth\n})\n\nconst logInFailure = error => ({\n  type: LOG_IN_FAILURE,\n  payload: error\n})\n","import { LOG_IN_BEGIN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../actions/auth'\n\nconst initialState = {\n  token: null,\n  user: null,\n  loading: false,\n  error: null\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case LOG_IN_BEGIN:\n    return {\n      ...state,\n      loading: true,\n      error: null\n    }\n  case LOG_IN_SUCCESS:\n    return {\n      ...state,\n      token: action.payload.token,\n      user: action.payload.user,\n      loading: false\n    }\n  case LOG_IN_FAILURE:\n    return {\n      ...state,\n      loading: false,\n      error: action.payload\n    }\n  default:\n    return state\n  }\n}\n","import { INDEX_BEGIN, INDEX_SUCCESS, INDEX_FAILURE } from '../actions/indexing'\n\nconst initialState = {\n  loading: false,\n  error: null\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case INDEX_BEGIN:\n    return {\n      ...state,\n      loading: true,\n      error: null\n    }\n  case INDEX_SUCCESS:\n    return {\n      ...state,\n      loading: false\n    }\n  case INDEX_FAILURE:\n    return {\n      ...state,\n      loading: false,\n      error: action.payload\n    }\n  default:\n    return state\n  }\n}\n","import { REMOVE_EPISODE, UPDATE_EPISODE } from '../actions/episodes'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n  case REMOVE_EPISODE: {\n    const { [action.payload]: episode, ...newState } = state // eslint-disable-line no-unused-vars\n    return newState\n  }\n  case UPDATE_EPISODE:\n    return {\n      ...state,\n      [action.payload.id]: {\n        ...state[action.payload.id],\n        ...action.payload\n      }\n    }\n  default:\n    return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport auth from './auth'\nimport indexing from './indexing'\nimport movies from './movies'\nimport shows from './shows'\nimport seasons from './seasons'\nimport episodes from './episodes'\n\nconst rootReducer = combineReducers({\n  auth: persistReducer({\n    key: 'auth',\n    storage: storage,\n    whitelist: ['token', 'user'],\n    debug: process.env.NODE_ENV === 'development'\n  }, auth),\n  indexing,\n  movies,\n  shows,\n  seasons,\n  episodes\n})\n\nexport default persistReducer({\n  key: 'root',\n  storage: storage,\n  whitelist: ['movies', 'shows'],\n  debug: process.env.NODE_ENV === 'development'\n}, rootReducer)\n","import { REMOVE_MOVIE, UPDATE_MOVIE } from '../actions/movies'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n  case REMOVE_MOVIE: {\n    const { [action.payload]: movie, ...newState } = state // eslint-disable-line no-unused-vars\n    return newState\n  }\n  case UPDATE_MOVIE:\n    return {\n      ...state,\n      [action.payload.id]: {\n        ...state[action.payload.id],\n        ...action.payload\n      }\n    }\n  default:\n    return state\n  }\n}\n","import { REMOVE_SHOW, UPDATE_SHOW } from '../actions/shows'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n  case REMOVE_SHOW: {\n    const { [action.payload]: show, ...newState } = state // eslint-disable-line no-unused-vars\n    return newState\n  }\n  case UPDATE_SHOW:\n    return {\n      ...state,\n      [action.payload.id]: {\n        ...state[action.payload.id],\n        ...action.payload\n      }\n    }\n  default:\n    return state\n  }\n}\n","import { REMOVE_SEASON, UPDATE_SEASON } from '../actions/seasons'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n  case REMOVE_SEASON: {\n    const { [action.payload]: season, ...newState } = state // eslint-disable-line no-unused-vars\n    return newState\n  }\n  case UPDATE_SEASON:\n    return {\n      ...state,\n      [action.payload.id]: {\n        ...state[action.payload.id],\n        ...action.payload\n      }\n    }\n  default:\n    return state\n  }\n}\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport persistedReducer from './reducers'\n\nexport default createStore(\n  persistedReducer,\n  applyMiddleware(thunk)\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React, { Component } from 'react'\nimport './Cover.scss'\n\nclass Cover extends Component {\n  render() {\n    return (\n      <div className='Cover' style={{height: `${this.props.height}px`, width: `${this.props.width}px`}}>\n        <div className='Cover__progress' style={{width: `${this.props.progress}%`}} />\n        <img className='Cover__image' src={this.props.url} alt={this.props.alt} style={{'--box-shadow-color': this.props.color && this.props.color.replace('rgb', 'rgba').replace(')', ', 0.16)')}} />\n      </div>\n    )\n  }\n}\n\nexport default Cover\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n// import './Item.scss'\n\nimport Cover from './Cover'\n\nclass Item extends Component {\n  render() {\n    return (\n      <div className='Item'>\n        <Link to={this.props.item.path}>\n          <Cover url={this.props.item.posterUrl || '/cover.png'} color={this.props.item.posterColor} alt={this.props.item.name} progress={((this.props.item.progress || 0) * 100) / this.props.item.runtime} height={this.props.height} width={this.props.width} />\n        </Link>\n      </div>\n    )\n  }\n}\n\nexport default Item\n","import React, { Component } from 'react'\n// import './ItemList.scss'\n\nimport Item from './Item'\n\nclass ItemList extends Component {\n  render() {\n    return (\n      <div className='ItemList'>\n        {this.props.items.map(item => <Item item={item} height={this.props.itemHeight} width={this.props.itemWidth} key={item.id} />)}\n      </div>\n    )\n  }\n}\n\nexport default ItemList\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n// import './ForYou.scss'\n\nimport ItemList from '../components/ItemList'\n\nclass ForYou extends Component {\n  render() {\n    return (\n      <div className='ForYou'>\n        <ItemList items={Object.values(this.props.movies)} itemHeight={360} itemWidth={240} />\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    movies: state.movies\n  })\n)(ForYou)\n","import React, { Component } from 'react'\n\nclass PlyrCaption extends Component {\n  render() {\n    return (\n      <track\n        kind='captions'\n        label={this.props.caption.information}\n        src={this.props.caption.url}\n        srcLang={this.props.caption.srclang || 'en'}\n        default={this.props.key === 0} />\n    )\n  }\n}\n\nexport default PlyrCaption\n","import React, { Component } from 'react'\n\nclass PlyrSource extends Component {\n  render() {\n    return (\n      <source\n        src={this.props.source.url}\n        type={this.props.source.mimeType}\n        size={this.props.source.information} />\n    )\n  }\n}\n\nexport default PlyrSource\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Plyr from 'plyr'\nimport './PlyrPlayer.scss'\n\nimport { index } from '../actions/indexing'\n\nimport PlyrCaption from './PlyrPlayer/PlyrCaption'\nimport PlyrSource from './PlyrPlayer/PlyrSource'\n\nclass PlyrPlayer extends Component {\n  componentDidMount() {\n    if (document.querySelector('#player')) {\n      this.player = new Plyr(document.querySelector('#player'), {\n        debug: process.env.NODE_ENV === 'development'\n      })\n      this.player.on('play', () => {\n        if (document.querySelector('button#continue')) {\n          document.querySelector('button#continue').style.display = 'none'\n        }\n      })\n      this.player.on('timeupdate', event => {\n        if (event.detail.plyr.currentTime !== 0) {\n          // this.props.item.progress = event.detail.plyr.currentTime\n        }\n      })\n    }\n  }\n\n  render() {\n    if (this.props.item.files.filter(file => file.type === 'source').length === 0) {\n      return null\n    }\n    console.log(this.props.item.files.filter(file => file.type === 'source')[0].url)\n\n    return (\n      <div className='PlyrPlayer'>\n        <video\n          src={this.props.item.files.filter(file => file.type === 'source')[0].url}\n          id='player' crossOrigin='true' playsInline controls>\n          {this.props.item.files.filter(file => file.type === 'source').map((source, index) => {\n            return (<PlyrSource source={source} key={index} />)\n          })}\n          {this.props.item.files.filter(file => file.type === 'caption').map((caption, index) => {\n            return (<PlyrCaption caption={caption} key={index} />)\n          })}\n          <a href={this.props.item.files.filter(file => file.type === 'source')[0].src} download>Download</a>\n        </video>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  state => ({}),\n  { index }\n)(PlyrPlayer)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n// import './Movie.scss'\n\n// import Caption from '../../models/Caption'\n// import { default as MovieModel } from '../../models/Movie'\n// import Source from '../../models/Source'\n// import Video from '../../models/Video'\n\nimport PlyrPlayer from '../../components/PlyrPlayer'\n\nclass Movie extends Component {\n  render() {\n    // const video = new Video(\n    //   'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg',\n    //   [\n    //     new Source('https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4', 'video/mp4', 576),\n    //     new Source('https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-720p.mp4', 'video/mp4', 720),\n    //     new Source('https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-1080p.mp4', 'video/mp4', 1080)\n    //   ],\n    //   [\n    //     new Caption('English', 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt', 'en'),\n    //     new Caption('Français', 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', 'fr')\n    //   ]\n    // )\n    // // const movie = new MovieModel(299537, video).fetch()\n    // const movie = new MovieModel(match.params.id, video).fetch()\n    // console.log(movie)\n\n    return (\n      <div className=\"Movie\">\n        <PlyrPlayer item={this.props.movies[this.props.match.params.id]} />\n        <h1>{this.props.movies[this.props.match.params.id].name}</h1>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    movies: state.movies\n  })\n)(Movie)\n","import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\n// import './Movies.scss'\n\nimport Movie from './Movies/Movie'\n\nclass Movies extends Component {\n  render() {\n    return (\n      <div className='Movies'>\n        <Route path={`${this.props.match.path}/:id`} component={Movie}/>\n        <Route\n          exact\n          path={this.props.match.path}\n          render={() => <h3>Please select a movie.</h3>} />\n      </div>\n    )\n  }\n}\n\nexport default Movies\n","import React, { Component } from 'react'\n// import './Shows.scss'\n\nclass Shows extends Component {\n  render() {\n    return (\n      <div className='Shows'>\n      </div>\n    )\n  }\n}\n\nexport default Shows\n","import React, { Component } from 'react'\n// import './Find.scss'\n\nclass Find extends Component {\n  render() {\n    return (\n      <div className='Find'>\n      </div>\n    )\n  }\n}\n\nexport default Find\n","import React, { Component } from 'react'\n// import './Welcome.scss'\n\nclass Welcome extends Component {\n  render() {\n    return (\n      <div className='Welcome'>\n      </div>\n    )\n  }\n}\n\nexport default Welcome\n","import React, { Component } from 'react'\n// import './NotFound.scss'\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div className='NotFound'>\n      </div>\n    )\n  }\n}\n\nexport default NotFound\n","import React, { Component } from 'react'\n// import './Loading.scss'\n\n// import Loader from './Nucleo/icons/circle-02-2'\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className='Loading'>\n      </div>\n    )\n  }\n}\n\nexport default Loading\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { connect } from 'react-redux'\n// import logo from './logo.svg'\n// import './App.scss'\n\nimport { logIn } from './actions/auth'\nimport { index } from './actions/indexing'\n\nimport MicrosoftAuth from './services/auth/MicrosoftAuth'\n\nimport ForYou from './scenes/ForYou'\nimport Movies from './scenes/Movies'\nimport Shows from './scenes/Shows'\nimport Find from './scenes/Find'\nimport Welcome from './scenes/Welcome'\nimport NotFound from './scenes/NotFound'\n\nimport Loading from './components/Loading'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // this required for the login popup to close (https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/174)\n    new MicrosoftAuth()\n  }\n\n  render() {\n    if (this.props.loading) {\n      return <Loading />\n    } else {\n      if (this.props.user) {\n        return (\n          <div className='App'>\n            <button onClick={this.props.index}>Index</button>\n\n            <Router>\n              <Switch>\n                <Route path='/' exact component={ForYou} />\n                <Route path='/movies' component={Movies} />\n                <Route path='/shows' component={Shows} />\n                <Route path='/find' component={Find} />\n                <Route component={NotFound} />\n              </Switch>\n            </Router>\n          </div>\n        )\n      } else {\n        return (\n          <div className='App'>\n            <button onClick={this.props.logIn}>Launch</button>\n\n            <Router>\n              <Switch>\n                <Route path='/' exact component={Welcome} />\n                <Route component={NotFound} />\n              </Switch>\n            </Router>\n          </div>\n        )\n      }\n    }\n  }\n}\n\nexport default connect(\n  state => ({\n    user: state.auth.user\n  }),\n  { logIn, index }\n)(App)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport { persistStore } from 'redux-persist'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport Loading from './components/Loading'\n\nimport './index.scss'\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<Loading />} persistor={persistStore(store)}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}