{"version":3,"sources":["services/auth/MicrosoftAuth.js","constants.js","services/drives/OneDrive.js","services/indexing/IndexFiles.js","services/indexing/IndexMovies.js","services/indexing/IndexShows.js","services/indexing/IndexSeasons.js","services/indexing/IndexEpisodes.js","services/databases/TMDb.js","services/Parametrize.js","services/fetching/FetchMovie.js","selectors/movies.js","actions/movies.js","services/fetching/FetchShow.js","selectors/shows.js","actions/shows.js","services/fetching/FetchSeason.js","selectors/seasons.js","actions/seasons.js","services/fetching/FetchEpisode.js","selectors/episodes.js","actions/episodes.js","actions/indexing.js","actions/auth.js","reducers/auth.js","reducers/indexing.js","reducers/episodes.js","reducers/index.js","reducers/movies.js","reducers/shows.js","reducers/seasons.js","store.js","serviceWorker.js","components/Cover.js","components/Item.js","components/ItemList.js","scenes/ForYou.js","components/PlyrPlayer/PlyrCaption.js","components/PlyrPlayer/PlyrContinue.js","components/PlyrPlayer/PlyrSource.js","components/PlyrPlayer.js","scenes/Movies/Movie.js","scenes/Movies.js","scenes/Shows.js","scenes/Find.js","scenes/Welcome.js","scenes/NotFound.js","components/Loading.js","App.js","index.js"],"names":["MicrosoftAuth","Object","classCallCheck","this","_userAgentApplication","UserAgentApplication","config","clientID","_this","logIn","then","accessToken","token","user","userAgentApplication","getUser","_this2","loginPopup","graphScopes","acquireTokenSilent","catch","acquireTokenPopup","process","ITEM_STATES","ITEM_TYPES","FILE_TYPES","SOURCE_EXTENSIONS","CAPTION_EXTENSIONS","OneDrive","_client","Client","init","authProvider","done","client","api","get","itemId","concat","IndexFiles","oneDrive","folderId","_oneDrive","_folderId","children","response","value","map","item","index","filter","source","type","fileType","name","file","id","extension","fileExtension","information","fileInformation","mimeType","url","fileName","includes","split","pop","shift","IndexMovies","Promise","movies","movie","all","folder","perform","files","state","path","IndexShows","shows","show","IndexSeasons","showIds","_showIds","showId","performForShow","season","Number","isNaN","seasonNumber","parseInt","IndexEpisodes","seasonIds","_seasonIds","seasonId","performForSeason","episode","episodeNumber","rp","require","TMDb","query","rateLimiting","objectSpread","uri","base_uri","qs","results","length","resolve","setTimeout","api_key","language","headers","User-Agent","json","Parametrize","string","_string","toLowerCase","replace","FetchMovie","_movie","_tmdb","tmdb","findMovie","tmdbId","fetch","fetchDetails","fetchCredits","getPosterColor","backdropUrl","backdrop_path","overview","posterUrl","poster_path","releaseDate","release_date","runtime","title","trailerLink","_this3","movieCredits","cast","cast_member","character","crew","crew_member","job","_this4","analyze","scale","result","posterColor","color","moviesSelector","fetchMovie","dispatch","getState","createSelector","movieSelector","fetchedMovie","updateMovie","payload","FetchShow","_show","findShow","firstAirDate","first_air_date","lastAirDate","last_air_date","showsSelector","showSelector","updateShow","FetchSeason","showTmdbId","showName","_season","airDate","air_date","seasonCredits","seasonsSelector","seasons","seasonSelector","updateSeason","FetchEpisode","seasonName","_episode","episodesSelector","episodes","fetchEpisode","episodeSelector","fetchedEpisode","updateEpisode","indexBegin","auth","forEach","ids","keys","removeMovie","fetchShow","fetchedShow","removeShow","fetchSeason","fetchedSeason","removeSeason","removeEpisode","indexSuccess","error","indexFailure","statusCode","logInBegin","logInSuccess","logInFailure","initialState","loading","rootReducer","combineReducers","persistReducer","key","storage","whitelist","debug","arguments","undefined","action","indexing","objectWithoutProperties","_toPropertyKey","defineProperty","shows_toPropertyKey","seasons_toPropertyKey","episodes_toPropertyKey","createStore","persistedReducer","applyMiddleware","thunk","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","Cover","react_default","a","createElement","className","style","height","props","width","progress","src","alt","--box-shadow-color","Component","Item","react_router_dom","to","src_components_Cover","ItemList","items","components_Item","itemHeight","itemWidth","ForYou","components_ItemList","values","connect","PlyrCaption","kind","label","caption","srcLang","srclang","default","PlyrContinue","document","querySelector","display","parent","player","play","currentTime","onClick","continueWatching","bind","PlyrSource","size","PlyrPlayer","Plyr","on","event","detail","plyr","poster","crossOrigin","playsInline","controls","PlyrPlayer_PlyrSource","PlyrPlayer_PlyrCaption","href","download","PlyrPlayer_PlyrContinue","Movie","src_components_PlyrPlayer","params","Movies","react_router","component","exact","render","Shows","Find","Welcome","NotFound","Loading","App","possibleConstructorReturn","getPrototypeOf","call","components_Loading","ReactDOM","es","store","integration_react","persistor","persistStore","src_App","getElementById","URL","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7c30d5f2.chunk.js","sourcesContent":["import { UserAgentApplication } from 'msal'\n\nclass MicrosoftAuth {\n  static config = {\n    clientID: process.env.REACT_APP_MICROSOFT_CLIENT_ID,\n    graphScopes: ['user.read', 'files.read.all']\n  }\n\n  constructor() {\n    this._userAgentApplication = new UserAgentApplication(\n      MicrosoftAuth.config.clientID,\n      'https://login.microsoftonline.com/common',\n      null\n    )\n  }\n\n  perform() {\n    return this.logIn().then(accessToken => {\n      return {\n        token: accessToken,\n        user: this.userAgentApplication.getUser()\n      }\n    })\n  }\n\n  logIn() {\n    return this.userAgentApplication.loginPopup(MicrosoftAuth.config.graphScopes).then(() => {\n      return this.userAgentApplication.acquireTokenSilent(MicrosoftAuth.config.graphScopes).then(accessToken => {\n        return accessToken\n      }).catch(() => {\n        return this.userAgentApplication.acquireTokenPopup(MicrosoftAuth.config.graphScopes).then(accessToken => {\n          return accessToken\n        })\n      })\n    })\n  }\n\n  get userAgentApplication() {\n    return this._userAgentApplication\n  }\n}\n\nexport default MicrosoftAuth\n","export const ITEM_STATES = {\n  INDEXED: 'indexed',\n  FETCHED: 'fetched'\n}\n\nexport const ITEM_TYPES = {\n  MOVIE: 'movie',\n  SHOW: 'show',\n  SEASON: 'season',\n  EPISODE: 'episode'\n}\n\nexport const FILE_TYPES = {\n  SOURCE: 'source',\n  CAPTION: 'caption'\n}\n\nexport const SOURCE_EXTENSIONS = ['mp4', 'm4v', 'mkv', 'webm']\nexport const CAPTION_EXTENSIONS = ['vtt']\n","import { Client } from '@microsoft/microsoft-graph-client'\n\nclass OneDrive {\n  constructor(accessToken) {\n    this._client = Client.init({\n      authProvider: done => done(null, accessToken)\n    })\n  }\n\n  movies() {\n    return this.client.api('/me/drive/root:/Plaain/Movies:/children').get()\n  }\n\n  shows() {\n    return this.client.api('/me/drive/root:/Plaain/Shows:/children').get()\n  }\n\n  children(itemId) {\n    return this.client.api(`/me/drive/items/${itemId}/children`).get()\n  }\n\n  get client() {\n    return this._client\n  }\n}\n\nexport default OneDrive\n","import { FILE_TYPES, SOURCE_EXTENSIONS, CAPTION_EXTENSIONS } from '../../constants'\n\nclass IndexFiles {\n  constructor(oneDrive, folderId) {\n    this._oneDrive = oneDrive\n    this._folderId = folderId\n  }\n\n  perform() {\n    return this.oneDrive.children(this.folderId).then(response => {\n      return response.value.map(item => this.index(item)).filter(source => source != null)\n    })\n  }\n\n  index(item) {\n    const type = IndexFiles.fileType(item.name)\n    if (item.file == null || type == null) {\n      return null\n    }\n\n    return {\n      id: item.id,\n      type: type,\n      name: item.name,\n      extension: IndexFiles.fileExtension(item.name),\n      information: IndexFiles.fileInformation(item.name),\n      mimeType: item.file.mimeType,\n      url: item['@microsoft.graph.downloadUrl']\n    }\n  }\n\n  static fileType(fileName) {\n    if (SOURCE_EXTENSIONS.includes(IndexFiles.fileExtension(fileName))) {\n      return FILE_TYPES.SOURCE\n    } else if (CAPTION_EXTENSIONS.includes(IndexFiles.fileExtension(fileName))) {\n      return FILE_TYPES.CAPTION\n    } else {\n      return null\n    }\n  }\n\n  static fileExtension(fileName) {\n    return fileName.split('.').pop()\n  }\n\n  static fileInformation(fileName) {\n    return fileName.split('.').shift()\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n\n  get folderId() {\n    return this._folderId\n  }\n}\n\nexport default IndexFiles\n","import { ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport OneDrive from '../drives/OneDrive'\n\nimport IndexFiles from './IndexFiles'\n\nclass IndexMovies {\n  constructor(accessToken) {\n    this._oneDrive = new OneDrive(accessToken)\n  }\n\n  async perform() {\n    return await Promise.all(await this.oneDrive.movies().then(response => {\n      return response.value.map(item => this.index(item))\n    })).then(movies => movies.filter(movie => movie != null))\n  }\n\n  async index(item) {\n    if (item.folder == null) {\n      return null\n    }\n\n    const files = await new IndexFiles(this.oneDrive, item.id).perform()\n\n    return {\n      type: ITEM_TYPES.MOVIE,\n      state: ITEM_STATES.INDEXED,\n      id: item.id,\n      name: item.name,\n      path: `/movies/${item.id}`,\n      files: files\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n}\n\nexport default IndexMovies\n","import { ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport OneDrive from '../drives/OneDrive'\n\nclass IndexShows {\n  constructor(accessToken) {\n    this._oneDrive = new OneDrive(accessToken)\n  }\n\n  async perform() {\n    return await Promise.all(await this.oneDrive.shows().then(response => {\n      return response.value.map(item => this.index(item))\n    })).then(shows => shows.filter(show => show != null))\n  }\n\n  async index(item) {\n    if (item.folder == null) {\n      return null\n    }\n\n    return {\n      type: ITEM_TYPES.SHOW,\n      state: ITEM_STATES.INDEXED,\n      id: item.id,\n      name: item.name,\n      path: `/shows/${item.id}`\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n}\n\nexport default IndexShows\n","import { ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport OneDrive from '../drives/OneDrive'\n\nclass IndexSeasons {\n  constructor(accessToken, showIds) {\n    this._oneDrive = new OneDrive(accessToken)\n    this._showIds = showIds\n  }\n\n  async perform() {\n    return [].concat(...await Promise.all(this.showIds.map(showId => this.performForShow(showId)).filter(season => season != null)))\n  }\n\n  async performForShow(showId) {\n    return await Promise.all(await this.oneDrive.children(showId).then(response => {\n      return response.value.map(item => this.index(item, showId))\n    }))\n  }\n\n  async index(item, showId) {\n    if (item.folder == null || Number.isNaN(item.name)) {\n      return null\n    }\n\n    const seasonNumber = Number.parseInt(item.name)\n\n    return {\n      type: ITEM_TYPES.SEASON,\n      state: ITEM_STATES.INDEXED,\n      id: item.id,\n      seasonNumber: seasonNumber,\n      showId,\n      path: `/seasons/${seasonNumber}`\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n\n  get showIds() {\n    return this._showIds\n  }\n}\n\nexport default IndexSeasons\n","import { ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport OneDrive from '../drives/OneDrive'\n\nimport IndexFiles from './IndexFiles'\n\nclass IndexEpisodes {\n  constructor(accessToken, seasonIds) {\n    this._oneDrive = new OneDrive(accessToken)\n    this._seasonIds = seasonIds\n  }\n\n  async perform() {\n    return [].concat(...await Promise.all(this.seasonIds.map(seasonId => this.performForSeason(seasonId)).filter(episode => episode != null)))\n  }\n\n  async performForSeason(seasonId) {\n    return await Promise.all(await this.oneDrive.children(seasonId).then(response => {\n      return response.value.map(item => this.index(item, seasonId))\n    }))\n  }\n\n  async index(item, seasonId) {\n    if (item.folder == null || Number.isNaN(item.name)) {\n      return null\n    }\n\n    const episodeNumber = Number.parseInt(item.name)\n    const files = await new IndexFiles(this.oneDrive, item.id).perform()\n\n    return {\n      type: ITEM_TYPES.EPISODE,\n      state: ITEM_STATES.INDEXED,\n      id: item.id,\n      episodeNumber: episodeNumber,\n      files: files,\n      seasonId,\n      path: `/episodes/${episodeNumber}`\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n\n  get seasonIds() {\n    return this._seasonIds\n  }\n}\n\nexport default IndexEpisodes\n","const rp = require('request-promise')\n\nclass TMDb {\n  static config = {\n    qs: {\n      api_key: process.env.REACT_APP_TMDB_API_KEY,\n      language: 'en-US'\n    },\n    headers: {\n      'User-Agent': 'Request-Promise'\n    },\n    json: true\n  }\n\n  static base_uri = 'https://api.themoviedb.org/3'\n\n  async findMovie(query) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/search/movie`, qs: {...TMDb.config.qs, query}}).then(response => {\n      if (response.results.length < 1) {\n        return null\n      }\n\n      return response.results[0].id\n    })\n  }\n\n  async findShow(query) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/search/tv`, qs: {...TMDb.config.qs, query}}).then(response => {\n      if (response.results.length < 1) {\n        return null\n      }\n\n      return response.results[0].id\n    })\n  }\n\n  async movie(id) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/movie/${id}`})\n  }\n\n  async movieCredits(id) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/movie/${id}/credits`})\n  }\n\n  async show(id) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${id}`})\n  }\n\n  async season(showId, seasonNumber) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${showId}/season/${seasonNumber}`})\n  }\n\n  async seasonCredits(showId, seasonNumber) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${showId}/season/${seasonNumber}/credits`})\n  }\n\n  async episode(showId, seasonNumber, episodeNumber) {\n    await TMDb.rateLimiting()\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${showId}/season/${seasonNumber}/episode/${episodeNumber}`})\n  }\n\n  // TMDb only allows for up to 4 requests per second (https://developers.themoviedb.org/3/getting-started/request-rate-limiting)\n  static async rateLimiting() {\n    await new Promise(resolve => setTimeout(resolve, 250))\n  }\n}\n\nexport default TMDb\n","class Parametrize {\n  constructor(string) {\n    this._string = string\n  }\n\n  perform() {\n    return this.string.toLowerCase().replace(/\\s/g, '+')\n  }\n\n  get string() {\n    return this._string\n  }\n}\n\nexport default Parametrize\n","import analyze from 'rgbaster'\n\nimport { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\nimport Parametrize from '../Parametrize'\n\nclass FetchMovie {\n  constructor(id, name) {\n    this._movie = { id, name }\n    this._tmdb = new TMDb()\n  }\n\n  perform() {\n    return this.tmdb.findMovie(this.movie.name).then(tmdbId => this.fetch(tmdbId))\n  }\n\n  async fetch(tmdbId) {\n    this.movie.tmdbId = tmdbId\n\n    await Promise.all([\n      this.fetchDetails(),\n      this.fetchCredits()\n    ])\n    await this.getPosterColor()\n\n    return this.movie\n  }\n\n  fetchDetails() {\n    return this.tmdb.movie(this.movie.tmdbId)\n      .then(response => {\n        this.movie.state = ITEM_STATES.FETCHED\n        this.movie.backdropUrl = `https://image.tmdb.org/t/p/original${response.backdrop_path}`\n        this.movie.overview = response.overview\n        this.movie.posterUrl = `https://image.tmdb.org/t/p/original${response.poster_path}`\n        this.movie.releaseDate = response.release_date\n        this.movie.runtime = response.runtime\n        this.movie.name = response.title\n        this.movie.trailerLink = `https://www.youtube.com/results?search_query=${new Parametrize(this.movie.name).perform()}+official+trailer`\n      })\n  }\n\n  fetchCredits() {\n    return this.tmdb.movieCredits(this.movie.tmdbId)\n      .then(response => {\n        this.movie.cast = response.cast.map(cast_member => ({\n          character: cast_member.character,\n          name: cast_member.name\n        }))\n        this.movie.crew = response.crew.map(crew_member => ({\n          job: crew_member.job,\n          name: crew_member.name\n        }))\n      })\n  }\n\n  getPosterColor() {\n    return analyze(this.movie.posterUrl, { scale: 0.1 }).then(result => {\n      this.movie.posterColor = result[0].color\n    })\n  }\n\n  get movie() {\n    return this._movie\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n}\n\nexport default FetchMovie\n","import { createSelector } from 'reselect'\n\nconst moviesSelector = state => state.movies\n\nexport const movieSelector = id => {\n  return createSelector(\n    moviesSelector,\n    movies => movies[id]\n  )\n}\n","import FetchMovie from '../services/fetching/FetchMovie'\n\nimport { movieSelector } from '../selectors/movies'\n\nexport const REMOVE_MOVIE = 'REMOVE_MOVIE'\nexport const UPDATE_MOVIE = 'UPDATE_MOVIE'\n\nexport const fetchMovie = id => {\n  return (dispatch, getState) => {\n    const movie = movieSelector(id)(getState())\n    new FetchMovie(movie.id, movie.name).perform().then(fetchedMovie => {\n      dispatch(updateMovie(fetchedMovie))\n    }).catch(() => dispatch(fetchMovie(id)))\n  }\n}\n\nexport const removeMovie = id => ({\n  type: REMOVE_MOVIE,\n  payload: id\n})\n\nexport const updateMovie = movie => ({\n  type: UPDATE_MOVIE,\n  payload: movie\n})\n","import analyze from 'rgbaster'\n\nimport { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\n\nclass FetchShow {\n  constructor(id, name) {\n    this._show = { id, name }\n    this._tmdb = new TMDb()\n  }\n\n  perform() {\n    return this.tmdb.findShow(this.show.name).then(tmdbId => this.fetch(tmdbId))\n  }\n\n  async fetch(tmdbId) {\n    this.show.tmdbId = tmdbId\n\n    await Promise.all([\n      this.fetchDetails()\n    ])\n    await this.getPosterColor()\n\n    return this.show\n  }\n\n  fetchDetails() {\n    return this.tmdb.show(this.show.tmdbId)\n      .then(response => {\n        this.show.state = ITEM_STATES.FETCHED\n        this.show.backdropUrl = `https://image.tmdb.org/t/p/original${response.backdrop_path}`\n        this.show.firstAirDate = response.first_air_date\n        this.show.lastAirDate = response.last_air_date\n        this.show.name = response.name\n        this.show.overview = response.overview\n        this.show.posterUrl = `https://image.tmdb.org/t/p/original${response.poster_path}`\n      })\n  }\n\n  getPosterColor() {\n    return analyze(this.show.posterUrl, { scale: 0.1 }).then(result => {\n      this.show.posterColor = result[0].color\n    })\n  }\n\n  get show() {\n    return this._show\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n}\n\nexport default FetchShow\n","import { createSelector } from 'reselect'\n\nconst showsSelector = state => state.shows\n\nexport const showSelector = id => {\n  return createSelector(\n    showsSelector,\n    shows => shows[id]\n  )\n}\n","import FetchShow from '../services/fetching/FetchShow'\n\nimport { showSelector } from '../selectors/shows'\n\nexport const REMOVE_SHOW = 'REMOVE_SHOW'\nexport const UPDATE_SHOW = 'UPDATE_SHOW'\n\nexport const fetchShow = id => {\n  return (dispatch, getState) => {\n    const show = showSelector(id)(getState())\n    new FetchShow(show.id, show.name).perform().then(fetchedShow => {\n      dispatch(updateShow(fetchedShow))\n    }).catch(() => dispatch(fetchShow(id)))\n  }\n}\n\nexport const removeShow = id => ({\n  type: REMOVE_SHOW,\n  payload: id\n})\n\nexport const updateShow = show => ({\n  type: UPDATE_SHOW,\n  payload: show\n})\n","import analyze from 'rgbaster'\n\nimport { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\nimport Parametrize from '../Parametrize'\n\nclass FetchSeason {\n  constructor(showTmdbId, showName, id, seasonNumber) {\n    this._show = { tmdbId: showTmdbId, name: showName }\n    this._season = { id, seasonNumber }\n    this._tmdb = new TMDb()\n  }\n\n  async perform() {\n    await Promise.all([\n      this.fetchDetails(),\n      this.fetchCredits()\n    ])\n    await this.getPosterColor()\n\n    return this.season\n  }\n\n  fetchDetails() {\n    return this.tmdb.season(this.show.tmdbId, this.season.seasonNumber)\n      .then(response => {\n        this.season.state = ITEM_STATES.FETCHED\n        this.season.airDate = response.air_date\n        this.season.name = response.name\n        this.season.overview = response.overview\n        this.season.posterUrl = `https://image.tmdb.org/t/p/original${response.poster_path}`\n        this.season.trailerLink = `https://www.youtube.com/results?search_query=${new Parametrize(this.show.name).perform()}+${new Parametrize(this.season.name).perform()}+official+trailer&i=movies-tv`\n      })\n  }\n\n  fetchCredits() {\n    return this.tmdb.seasonCredits(this.show.tmdbId, this.season.seasonNumber)\n      .then(response => {\n        this.season.cast = response.cast.map(cast_member => ({\n          character: cast_member.character,\n          name: cast_member.name\n        }))\n        this.season.crew = response.crew.map(crew_member => ({\n          job: crew_member.job,\n          name: crew_member.name\n        }))\n      })\n  }\n\n  getPosterColor() {\n    return analyze(this.season.posterUrl, { scale: 0.1 }).then(result => {\n      this.season.posterColor = result[0].color\n    })\n  }\n\n  get show() {\n    return this._show\n  }\n\n  get season() {\n    return this._season\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n}\n\nexport default FetchSeason\n","import { createSelector } from 'reselect'\n\nconst seasonsSelector = state => state.seasons\n\nexport const seasonSelector = id => {\n  return createSelector(\n    seasonsSelector,\n    seasons => seasons[id]\n  )\n}\n","import FetchSeason from '../services/fetching/FetchSeason'\n\nimport { seasonSelector } from '../selectors/seasons'\nimport { showSelector } from '../selectors/shows'\n\nexport const REMOVE_SEASON = 'REMOVE_SEASON'\nexport const UPDATE_SEASON = 'UPDATE_SEASON'\n\nexport const fetchSeason = id => {\n  return (dispatch, getState) => {\n    const season = seasonSelector(id)(getState())\n    const show = showSelector(season.showId)(getState())\n    new FetchSeason(show.tmdbId, show.name, season.id, season.seasonNumber).perform().then(fetchedSeason => {\n      dispatch(updateSeason(fetchedSeason))\n    }).catch(() => dispatch(fetchSeason(id)))\n  }\n}\n\nexport const removeSeason = id => ({\n  type: REMOVE_SEASON,\n  payload: id\n})\n\nexport const updateSeason = season => ({\n  type: UPDATE_SEASON,\n  payload: season\n})\n","import { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\n\nclass FetchEpisode {\n  constructor(showTmdbId, showName, seasonNumber, seasonName, id, episodeNumber) {\n    this._show = { tmdbId: showTmdbId, name: showName }\n    this._season = { seasonNumber, name: seasonName }\n    this._episode = { id, episodeNumber }\n    this._tmdb = new TMDb()\n  }\n\n  async perform() {\n    await Promise.all([\n      this.fetchDetails()\n    ])\n\n    return this.episode\n  }\n\n  fetchDetails() {\n    return this.tmdb.episode(this.show.tmdbId, this.season.seasonNumber, this.episode.episodeNumber)\n      .then(response => {\n        this.episode.state = ITEM_STATES.FETCHED\n        this.episode.airDate = response.air_date\n        this.episode.name = response.name\n        this.episode.overview = response.overview\n      })\n  }\n\n  get show() {\n    return this._show\n  }\n\n  get season() {\n    return this._season\n  }\n\n  get episode() {\n    return this._episode\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n}\n\nexport default FetchEpisode\n","import { createSelector } from 'reselect'\n\nconst episodesSelector = state => state.episodes\n\nexport const episodeSelector = id => {\n  return createSelector(\n    episodesSelector,\n    episodes => episodes[id]\n  )\n}\n","import FetchEpisode from '../services/fetching/FetchEpisode'\n\nimport { episodeSelector } from '../selectors/episodes'\nimport { seasonSelector } from '../selectors/seasons'\nimport { showSelector } from '../selectors/shows'\n\nexport const REMOVE_EPISODE = 'REMOVE_EPISODE'\nexport const UPDATE_EPISODE = 'UPDATE_EPISODE'\n\nexport const fetchEpisode = id => {\n  return (dispatch, getState) => {\n    const episode = episodeSelector(id)(getState())\n    const season = seasonSelector(episode.seasonId)(getState())\n    const show = showSelector(season.showId)(getState())\n    new FetchEpisode(show.tmdbId, show.name, season.seasonNumber, season.name, episode.id, episode.episodeNumber).perform().then(fetchedEpisode => {\n      dispatch(updateEpisode(fetchedEpisode))\n    }).catch(() => dispatch(fetchEpisode(id)))\n  }\n}\n\nexport const removeEpisode = id => ({\n  type: REMOVE_EPISODE,\n  payload: id\n})\n\nexport const updateEpisode = episode => ({\n  type: UPDATE_EPISODE,\n  payload: episode\n})\n","import IndexMovies from '../services/indexing/IndexMovies'\nimport IndexShows from '../services/indexing/IndexShows'\nimport IndexSeasons from '../services/indexing/IndexSeasons'\nimport IndexEpisodes from '../services/indexing/IndexEpisodes'\n\nimport { logIn } from './auth'\nimport { fetchMovie, removeMovie, updateMovie } from './movies'\nimport { fetchShow, removeShow, updateShow } from './shows'\nimport { fetchSeason, removeSeason, updateSeason } from './seasons'\nimport { fetchEpisode, removeEpisode, updateEpisode } from './episodes'\n\nexport const INDEX_BEGIN = 'INDEX_BEGIN'\nexport const INDEX_SUCCESS = 'INDEX_SUCCESS'\nexport const INDEX_FAILURE = 'INDEX_FAILURE'\n\nexport const index = () => {\n  return (dispatch, getState) => {\n    dispatch(indexBegin())\n\n    new IndexMovies(getState().auth.token).perform().then(movies => {\n      movies.forEach(movie => {\n        dispatch(updateMovie(movie))\n        dispatch(fetchMovie(movie.id))\n      })\n      const ids = movies.map(movie => movie.id)\n      Object.keys(getState().movies).forEach(id => {\n        if (!ids.includes(id)) {\n          dispatch(removeMovie(id))\n        }\n      })\n    }).then(() => {\n      return new IndexShows(getState().auth.token).perform()\n    }).then(shows => {\n      shows.forEach(show => {\n        dispatch(updateShow(show))\n        dispatch(fetchShow(show.id))\n      })\n      const ids = shows.map(show => show.id)\n      Object.keys(getState().shows).forEach(id => {\n        if (!ids.includes(id)) {\n          dispatch(removeShow(id))\n        }\n      })\n    }).then(() => {\n      return new IndexSeasons(getState().auth.token, Object.keys(getState().shows)).perform()\n    }).then(seasons => {\n      seasons.forEach(season => {\n        dispatch(updateSeason(season))\n        dispatch(fetchSeason(season.id))\n      })\n      const ids = seasons.map(season => season.id)\n      Object.keys(getState().seasons).forEach(id => {\n        if (!ids.includes(id)) {\n          dispatch(removeSeason(id))\n        }\n      })\n    }).then(() => {\n      return new IndexEpisodes(getState().auth.token, Object.keys(getState().seasons)).perform()\n    }).then(episodes => {\n      episodes.forEach(episode => {\n        dispatch(updateEpisode(episode))\n        dispatch(fetchEpisode(episode.id))\n      })\n      const ids = episodes.map(episode => episode.id)\n      Object.keys(getState().episodes).forEach(id => {\n        if (!ids.includes(id)) {\n          dispatch(removeEpisode(id))\n        }\n      })\n    }).then(() => {\n      dispatch(indexSuccess())\n    }).catch(error => {\n      dispatch(indexFailure(error))\n\n      if (error.statusCode === 401) {\n        dispatch(logIn())\n      }\n    })\n  }\n}\n\nconst indexBegin = () => ({\n  type: INDEX_BEGIN\n})\n\nconst indexSuccess = () => ({\n  type: INDEX_SUCCESS\n})\n\nconst indexFailure = error => ({\n  type: INDEX_FAILURE,\n  payload: error\n})\n","import MicrosoftAuth from '../services/auth/MicrosoftAuth'\n\nimport { index } from './indexing'\n\nexport const LOG_IN_BEGIN = 'LOG_IN_BEGIN'\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'\n\nexport const logIn = () => {\n  return dispatch => {\n    dispatch(logInBegin())\n\n    new MicrosoftAuth().perform().then(auth => {\n      dispatch(logInSuccess(auth))\n      dispatch(index())\n    }).catch(error => dispatch(logInFailure(error)))\n  }\n}\n\nconst logInBegin = () => ({\n  type: LOG_IN_BEGIN\n})\n\nconst logInSuccess = auth => ({\n  type: LOG_IN_SUCCESS,\n  payload: auth\n})\n\nconst logInFailure = error => ({\n  type: LOG_IN_FAILURE,\n  payload: error\n})\n","import { LOG_IN_BEGIN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../actions/auth'\n\nconst initialState = {\n  token: null,\n  user: null,\n  loading: false,\n  error: null\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case LOG_IN_BEGIN:\n    return {\n      ...state,\n      loading: true,\n      error: null\n    }\n  case LOG_IN_SUCCESS:\n    return {\n      ...state,\n      token: action.payload.token,\n      user: action.payload.user,\n      loading: false\n    }\n  case LOG_IN_FAILURE:\n    return {\n      ...state,\n      loading: false,\n      error: action.payload\n    }\n  default:\n    return state\n  }\n}\n","import { INDEX_BEGIN, INDEX_SUCCESS, INDEX_FAILURE } from '../actions/indexing'\n\nconst initialState = {\n  loading: false,\n  error: null\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case INDEX_BEGIN:\n    return {\n      ...state,\n      loading: true,\n      error: null\n    }\n  case INDEX_SUCCESS:\n    return {\n      ...state,\n      loading: false\n    }\n  case INDEX_FAILURE:\n    return {\n      ...state,\n      loading: false,\n      error: action.payload\n    }\n  default:\n    return state\n  }\n}\n","import { REMOVE_EPISODE, UPDATE_EPISODE } from '../actions/episodes'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n  case REMOVE_EPISODE: {\n    const { [action.payload]: episode, ...newState } = state // eslint-disable-line no-unused-vars\n    return newState\n  }\n  case UPDATE_EPISODE:\n    return {\n      ...state,\n      [action.payload.id]: {\n        ...state[action.payload.id],\n        ...action.payload\n      }\n    }\n  default:\n    return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport auth from './auth'\nimport indexing from './indexing'\nimport movies from './movies'\nimport shows from './shows'\nimport seasons from './seasons'\nimport episodes from './episodes'\n\nconst rootReducer = combineReducers({\n  auth: persistReducer({\n    key: 'auth',\n    storage: storage,\n    whitelist: ['token', 'user'],\n    debug: process.env.NODE_ENV === 'development'\n  }, auth),\n  indexing,\n  movies,\n  shows,\n  seasons,\n  episodes\n})\n\nexport default persistReducer({\n  key: 'root',\n  storage: storage,\n  whitelist: ['movies', 'shows'],\n  debug: process.env.NODE_ENV === 'development'\n}, rootReducer)\n","import { REMOVE_MOVIE, UPDATE_MOVIE } from '../actions/movies'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n  case REMOVE_MOVIE: {\n    const { [action.payload]: movie, ...newState } = state // eslint-disable-line no-unused-vars\n    return newState\n  }\n  case UPDATE_MOVIE:\n    return {\n      ...state,\n      [action.payload.id]: {\n        ...state[action.payload.id],\n        ...action.payload\n      }\n    }\n  default:\n    return state\n  }\n}\n","import { REMOVE_SHOW, UPDATE_SHOW } from '../actions/shows'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n  case REMOVE_SHOW: {\n    const { [action.payload]: show, ...newState } = state // eslint-disable-line no-unused-vars\n    return newState\n  }\n  case UPDATE_SHOW:\n    return {\n      ...state,\n      [action.payload.id]: {\n        ...state[action.payload.id],\n        ...action.payload\n      }\n    }\n  default:\n    return state\n  }\n}\n","import { REMOVE_SEASON, UPDATE_SEASON } from '../actions/seasons'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n  case REMOVE_SEASON: {\n    const { [action.payload]: season, ...newState } = state // eslint-disable-line no-unused-vars\n    return newState\n  }\n  case UPDATE_SEASON:\n    return {\n      ...state,\n      [action.payload.id]: {\n        ...state[action.payload.id],\n        ...action.payload\n      }\n    }\n  default:\n    return state\n  }\n}\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport persistedReducer from './reducers'\n\nexport default createStore(\n  persistedReducer,\n  applyMiddleware(thunk)\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React, { Component } from 'react'\nimport './Cover.scss'\n\nclass Cover extends Component {\n  render() {\n    return (\n      <div className='Cover' style={{height: `${this.props.height}px`, width: `${this.props.width}px`}}>\n        <div className='Cover__progress' style={{width: `${this.props.progress}%`}} />\n        <img className='Cover__image' src={this.props.url} alt={this.props.alt} style={{'--box-shadow-color': this.props.color && this.props.color.replace('rgb', 'rgba').replace(')', ', 0.16)')}} />\n      </div>\n    )\n  }\n}\n\nexport default Cover\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n// import './Item.scss'\n\nimport Cover from './Cover'\n\nclass Item extends Component {\n  render() {\n    return (\n      <div className='Item'>\n        <Link to={this.props.item.path}>\n          <Cover url={this.props.item.posterUrl || '/cover.png'} color={this.props.item.posterColor} alt={this.props.item.name} progress={((this.props.item.progress || 0) * 100) / this.props.item.runtime} height={this.props.height} width={this.props.width} />\n        </Link>\n      </div>\n    )\n  }\n}\n\nexport default Item\n","import React, { Component } from 'react'\n// import './ItemList.scss'\n\nimport Item from './Item'\n\nclass ItemList extends Component {\n  render() {\n    return (\n      <div className='ItemList'>\n        {this.props.items.map(item => <Item item={item} height={this.props.itemHeight} width={this.props.itemWidth} key={item.id} />)}\n      </div>\n    )\n  }\n}\n\nexport default ItemList\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n// import './ForYou.scss'\n\nimport ItemList from '../components/ItemList'\n\nclass ForYou extends Component {\n  render() {\n    return (\n      <div className='ForYou'>\n        <ItemList items={Object.values(this.props.movies)} itemHeight={360} itemWidth={240} />\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    movies: state.movies\n  })\n)(ForYou)\n","import React, { Component } from 'react'\n\nclass PlyrCaption extends Component {\n  render() {\n    return (\n      <track\n        kind='captions'\n        label={this.props.caption.information}\n        src={this.props.caption.url}\n        srcLang={this.props.caption.srclang || 'en'}\n        default={this.props.key === 0} />\n    )\n  }\n}\n\nexport default PlyrCaption\n","import React, { Component } from 'react'\n\nclass PlyrContinue extends Component {\n  continueWatching() {\n    document.querySelector('button#continue').style.display = 'none'\n    this.props.parent.player.play()\n    this.props.parent.player.currentTime = this.props.parent.props.item.progress\n  }\n\n  render() {\n    if (this.props.parent.props.item.progress === 0) {\n      return null\n    }\n\n    return (\n      <button\n        id='continue'\n        onClick={this.continueWatching.bind(this)}>\n        Continue watching\n      </button>\n    )\n  }\n}\n\nexport default PlyrContinue\n","import React, { Component } from 'react'\n\nclass PlyrSource extends Component {\n  render() {\n    return (\n      <source\n        src={this.props.source.url}\n        type={this.props.source.mimeType}\n        size={this.props.source.information} />\n    )\n  }\n}\n\nexport default PlyrSource\n","import React, { Component } from 'react'\nimport Plyr from 'plyr'\nimport './PlyrPlayer.scss'\n\nimport PlyrCaption from './PlyrPlayer/PlyrCaption'\nimport PlyrContinue from './PlyrPlayer/PlyrContinue'\nimport PlyrSource from './PlyrPlayer/PlyrSource'\n\nclass PlyrPlayer extends Component {\n  componentDidMount() {\n    if (document.querySelector('#player')) {\n      this.player = new Plyr('#player', {\n        debug: process.env.NODE_ENV === 'development'\n      })\n      this.player.on('play', () => {\n        if (document.querySelector('button#continue')) {\n          document.querySelector('button#continue').style.display = 'none'\n        }\n      })\n      this.player.on('timeupdate', event => {\n        if (event.detail.plyr.currentTime !== 0) {\n          // this.props.item.progress = event.detail.plyr.currentTime\n        }\n      })\n    }\n  }\n\n  render() {\n    if (this.props.item.files.filter(file => file.type === 'source').length === 0) {\n      return null\n    }\n    console.log(this.props.item.files.filter(file => file.type === 'source')[0].url)\n\n    return (\n      <div className='PlyrPlayer'>\n        <video\n          poster={this.props.item.backdropUrl}\n          src={this.props.item.files.filter(file => file.type === 'source')[0].url}\n          id='player' crossOrigin='true' playsInline controls>\n          {this.props.item.files.filter(file => file.type === 'source').map((source, index) => {\n            return (<PlyrSource source={source} key={index} />)\n          })}\n          {this.props.item.files.filter(file => file.type === 'caption').map((caption, index) => {\n            return (<PlyrCaption caption={caption} key={index} />)\n          })}\n          <a href={this.props.item.files.filter(file => file.type === 'source')[0].src} download>Download</a>\n        </video>\n        <PlyrContinue parent={this} />\n      </div>\n    )\n  }\n}\n\nexport default PlyrPlayer\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n// import './Movie.scss'\n\n// import Caption from '../../models/Caption'\n// import { default as MovieModel } from '../../models/Movie'\n// import Source from '../../models/Source'\n// import Video from '../../models/Video'\n\nimport PlyrPlayer from '../../components/PlyrPlayer'\n\nclass Movie extends Component {\n  render() {\n    // const video = new Video(\n    //   'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg',\n    //   [\n    //     new Source('https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4', 'video/mp4', 576),\n    //     new Source('https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-720p.mp4', 'video/mp4', 720),\n    //     new Source('https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-1080p.mp4', 'video/mp4', 1080)\n    //   ],\n    //   [\n    //     new Caption('English', 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt', 'en'),\n    //     new Caption('Français', 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', 'fr')\n    //   ]\n    // )\n    // // const movie = new MovieModel(299537, video).fetch()\n    // const movie = new MovieModel(match.params.id, video).fetch()\n    // console.log(movie)\n\n    return (\n      <div className=\"Movie\">\n        <PlyrPlayer item={this.props.movies[this.props.match.params.id]} />\n        <h1>{this.props.movies[this.props.match.params.id].name}</h1>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    movies: state.movies\n  })\n)(Movie)\n","import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\n// import './Movies.scss'\n\nimport Movie from './Movies/Movie'\n\nclass Movies extends Component {\n  render() {\n    return (\n      <div className='Movies'>\n        <Route path={`${this.props.match.path}/:id`} component={Movie}/>\n        <Route\n          exact\n          path={this.props.match.path}\n          render={() => <h3>Please select a movie.</h3>} />\n      </div>\n    )\n  }\n}\n\nexport default Movies\n","import React, { Component } from 'react'\n// import './Shows.scss'\n\nclass Shows extends Component {\n  render() {\n    return (\n      <div className='Shows'>\n      </div>\n    )\n  }\n}\n\nexport default Shows\n","import React, { Component } from 'react'\n// import './Find.scss'\n\nclass Find extends Component {\n  render() {\n    return (\n      <div className='Find'>\n      </div>\n    )\n  }\n}\n\nexport default Find\n","import React, { Component } from 'react'\n// import './Welcome.scss'\n\nclass Welcome extends Component {\n  render() {\n    return (\n      <div className='Welcome'>\n      </div>\n    )\n  }\n}\n\nexport default Welcome\n","import React, { Component } from 'react'\n// import './NotFound.scss'\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div className='NotFound'>\n      </div>\n    )\n  }\n}\n\nexport default NotFound\n","import React, { Component } from 'react'\n// import './Loading.scss'\n\n// import Loader from './Nucleo/icons/circle-02-2'\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className='Loading'>\n      </div>\n    )\n  }\n}\n\nexport default Loading\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { connect } from 'react-redux'\n// import logo from './logo.svg'\n// import './App.scss'\n\nimport { logIn } from './actions/auth'\nimport { index } from './actions/indexing'\n\nimport MicrosoftAuth from './services/auth/MicrosoftAuth'\n\nimport ForYou from './scenes/ForYou'\nimport Movies from './scenes/Movies'\nimport Shows from './scenes/Shows'\nimport Find from './scenes/Find'\nimport Welcome from './scenes/Welcome'\nimport NotFound from './scenes/NotFound'\n\nimport Loading from './components/Loading'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // this required for the login popup to close (https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/174)\n    new MicrosoftAuth()\n  }\n\n  render() {\n    if (this.props.loading) {\n      return <Loading />\n    } else {\n      if (this.props.user) {\n        return (\n          <div className='App'>\n            <button onClick={this.props.index}>Index</button>\n\n            <Router>\n              <Switch>\n                <Route path='/' exact component={ForYou} />\n                <Route path='/movies' component={Movies} />\n                <Route path='/shows' component={Shows} />\n                <Route path='/find' component={Find} />\n                <Route component={NotFound} />\n              </Switch>\n            </Router>\n          </div>\n        )\n      } else {\n        return (\n          <div className='App'>\n            <button onClick={this.props.logIn}>Launch</button>\n\n            <Router>\n              <Switch>\n                <Route path='/' exact component={Welcome} />\n                <Route component={NotFound} />\n              </Switch>\n            </Router>\n          </div>\n        )\n      }\n    }\n  }\n}\n\nexport default connect(\n  state => ({\n    user: state.auth.user\n  }),\n  { logIn, index }\n)(App)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport { persistStore } from 'redux-persist'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport Loading from './components/Loading'\n\nimport './index.scss'\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<Loading />} persistor={persistStore(store)}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}