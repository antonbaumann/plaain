{"version":3,"sources":["services/auth/MicrosoftAuth.js","services/drives/OneDrive.js","constants.js","services/indexing/IndexFiles.js","services/indexing/IndexMovies.js","services/indexing/IndexEpisodes.js","services/indexing/IndexSeasons.js","services/indexing/IndexShows.js","services/indexing/IndexItems.js","services/databases/TMDb.js","services/fetching/FetchMovie.js","selectors/movies.js","actions/movies.js","services/fetching/FetchEpisode.js","services/fetching/FetchSeason.js","services/fetching/FetchShow.js","selectors/shows.js","actions/shows.js","actions/indexing.js","actions/auth.js","reducers/auth.js","reducers/indexing.js","reducers/index.js","reducers/movies.js","reducers/shows.js","store.js","serviceWorker.js","scenes/ForYou.js","scenes/Movies/Movie.js","scenes/Movies.js","scenes/Shows.js","scenes/Find.js","scenes/Welcome.js","scenes/NotFound.js","components/PlyrPlayer/PlyrCaption.js","components/PlyrPlayer/PlyrContinue.js","components/PlyrPlayer/PlyrSource.js","components/PlyrPlayer.js","App.js","components/Loading.js","index.js"],"names":["MicrosoftAuth","Object","classCallCheck","this","_userAgentApplication","UserAgentApplication","config","clientID","_this","logIn","then","accessToken","token","user","userAgentApplication","getUser","_this2","loginPopup","graphScopes","acquireTokenSilent","catch","acquireTokenPopup","process","OneDrive","_client","Client","init","authProvider","done","client","api","get","itemId","concat","ITEM_ROLES","ITEM_STATES","ITEM_TYPES","FILE_TYPES","SOURCE_EXTENSIONS","CAPTION_EXTENSIONS","IndexFiles","oneDrive","folderId","_oneDrive","_folderId","children","response","value","map","item","index","filter","source","type","fileType","name","file","id","extension","fileExtension","information","fileInformation","mimeType","url","fileName","includes","split","pop","shift","IndexMovies","movies","folder","perform","files","state","role","length","IndexEpisodes","episodes","Promise","all","episode","Number","isNaN","episodeNumber","parseInt","IndexSeasons","seasons","season","seasonNumber","IndexShows","shows","IndexItems","movie","show","data","assign","rp","require","TMDb","query","objectSpread","uri","base_uri","qs","results","showId","api_key","language","headers","User-Agent","json","FetchMovie","_movie","_tmdb","tmdb","findMovie","tmdbId","fetch","fetchDetails","fetchCredits","backdropUrl","backdrop_path","overview","posterUrl","poster_path","releaseDate","release_date","runtime","title","affiliateLink","parametrize","trailerLink","_this3","movieCredits","cast","cast_member","character","crew","crew_member","job","string","toLowerCase","replace","moviesSelector","addMovie","payload","fetchMovie","movieId","dispatch","getState","createSelector","movieSelector","newMovie","progress","FetchEpisode","_show","_season","_episode","airDate","air_date","FetchSeason","handleDetailsResponse","seasonCredits","mergeEpisodes","responseEpisodes","undefined","episode_number","indexedEpisode","resolve","setTimeout","FetchShow","findShow","handleResponse","firstAirDate","first_air_date","lastAirDate","last_air_date","mergeSeasons","responseSeasons","season_number","indexedSeason","showsSelector","addShow","fetchShow","showSelector","newShow","forEach","oldSeason","oldEpisode","indexBegin","auth","_ref","movieProgress","values","moviesArr","episodeProgress","showsArr","indexSuccess","error","indexFailure","statusCode","logInBegin","logInSuccess","logInFailure","initialState","loading","rootReducer","combineReducers","persistReducer","key","storage","whitelist","debug","arguments","action","indexing","defineProperty","createStore","persistedReducer","applyMiddleware","thunk","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ForYou","react_default","a","createElement","className","Component","Movie","params","Movies","Route","path","component","exact","render","Shows","Find","Welcome","NotFound","PlyrCaption","kind","label","props","caption","src","srcLang","srclang","default","PlyrContinue","document","querySelector","style","display","parent","player","play","currentTime","onClick","continueWatching","bind","PlyrSource","size","PlyrPlayer","Plyr","on","event","detail","plyr","poster","crossOrigin","playsInline","controls","PlyrPlayer_PlyrSource","PlyrPlayer_PlyrCaption","href","download","PlyrPlayer_PlyrContinue","App","possibleConstructorReturn","getPrototypeOf","call","src_components_PlyrPlayer","BrowserRouter","Switch","connect","Loading","ReactDOM","es","store","integration_react","components_Loading","persistor","persistStore","src_App","getElementById","URL","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0fe00dd2.chunk.js","sourcesContent":["import { UserAgentApplication } from 'msal'\n\nclass MicrosoftAuth {\n  static config = {\n    clientID: process.env.REACT_APP_MICROSOFT_CLIENT_ID,\n    graphScopes: ['user.read', 'files.read.all']\n  }\n\n  constructor() {\n    this._userAgentApplication = new UserAgentApplication(\n      MicrosoftAuth.config.clientID,\n      'https://login.microsoftonline.com/common',\n      null\n    )\n  }\n\n  perform() {\n    return this.logIn().then(accessToken => {\n      return {\n        token: accessToken,\n        user: this.userAgentApplication.getUser()\n      }\n    })\n  }\n\n  logIn() {\n    return this.userAgentApplication.loginPopup(MicrosoftAuth.config.graphScopes).then(() => {\n      return this.userAgentApplication.acquireTokenSilent(MicrosoftAuth.config.graphScopes).then(accessToken => {\n        return accessToken\n      }).catch(() => {\n        return this.userAgentApplication.acquireTokenPopup(MicrosoftAuth.config.graphScopes).then(accessToken => {\n          return accessToken\n        })\n      })\n    })\n  }\n\n  get userAgentApplication() {\n    return this._userAgentApplication\n  }\n}\n\nexport default MicrosoftAuth\n","import { Client } from '@microsoft/microsoft-graph-client'\n\nclass OneDrive {\n  constructor(accessToken) {\n    this._client = Client.init({\n      authProvider: done => done(null, accessToken)\n    })\n  }\n\n  movies() {\n    return this.client.api('/me/drive/root:/Plaain/Movies:/children').get()\n  }\n\n  shows() {\n    return this.client.api('/me/drive/root:/Plaain/Shows:/children').get()\n  }\n\n  children(itemId) {\n    return this.client.api(`/me/drive/items/${itemId}/children`).get()\n  }\n\n  get client() {\n    return this._client\n  }\n}\n\nexport default OneDrive\n","export const ITEM_ROLES = {\n  LIBRARY: 'library',\n  RECOMMENDED: 'recommended'\n}\n\nexport const ITEM_STATES = {\n  INDEXED: 'indexed',\n  FETCHED: 'fetched'\n}\n\nexport const ITEM_TYPES = {\n  MOVIE: 'movie',\n  SHOW: 'show',\n  SEASON: 'season',\n  EPISODE: 'episode'\n}\n\nexport const FILE_TYPES = {\n  SOURCE: 'source',\n  CAPTION: 'caption'\n}\n\nexport const SOURCE_EXTENSIONS = ['mp4', 'm4v', 'mkv', 'webm']\nexport const CAPTION_EXTENSIONS = ['vtt']\n","import { FILE_TYPES, SOURCE_EXTENSIONS, CAPTION_EXTENSIONS } from '../../constants'\n\nclass IndexFiles {\n  constructor(oneDrive, folderId) {\n    this._oneDrive = oneDrive\n    this._folderId = folderId\n  }\n\n  perform() {\n    return this.oneDrive.children(this.folderId).then(response => {\n      return response.value.map(item => this.index(item)).filter(source => source != null)\n    })\n  }\n\n  index(item) {\n    const type = IndexFiles.fileType(item.name)\n    if (item.file == null || type == null) {\n      return null\n    }\n\n    return {\n      id: item.id,\n      type: type,\n      name: item.name,\n      extension: IndexFiles.fileExtension(item.name),\n      information: IndexFiles.fileInformation(item.name),\n      mimeType: item.file.mimeType,\n      url: item['@microsoft.graph.downloadUrl']\n    }\n  }\n\n  static fileType(fileName) {\n    if (SOURCE_EXTENSIONS.includes(IndexFiles.fileExtension(fileName))) {\n      return FILE_TYPES.SOURCE\n    } else if (CAPTION_EXTENSIONS.includes(IndexFiles.fileExtension(fileName))) {\n      return FILE_TYPES.CAPTION\n    } else {\n      return null\n    }\n  }\n\n  static fileExtension(fileName) {\n    return fileName.split('.').pop()\n  }\n\n  static fileInformation(fileName) {\n    return fileName.split('.').shift()\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n\n  get folderId() {\n    return this._folderId\n  }\n}\n\nexport default IndexFiles\n","import { FILE_TYPES, ITEM_ROLES, ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport IndexFiles from './IndexFiles'\n\nclass IndexMovies {\n  constructor(oneDrive) {\n    this._oneDrive = oneDrive\n  }\n\n  perform() {\n    return this.oneDrive.movies().then(response => {\n      return response.value.map(item => this.index(item))\n    })\n  }\n\n  async index(item) {\n    if (item.folder == null) {\n      return null\n    }\n\n    const files = await new IndexFiles(this.oneDrive, item.id).perform()\n\n    return {\n      type: ITEM_TYPES.MOVIE,\n      state: ITEM_STATES.INDEXED,\n      role: files.filter(file => file.type === FILE_TYPES.SOURCE).length > 0 ? ITEM_ROLES.LIBRARY : ITEM_ROLES.RECOMMENDED,\n      id: item.id,\n      name: item.name,\n      files: files\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n}\n\nexport default IndexMovies\n","import { FILE_TYPES, ITEM_ROLES, ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport IndexFiles from './IndexFiles'\n\nclass IndexEpisodes {\n  constructor(oneDrive, folderId) {\n    this._oneDrive = oneDrive\n    this._folderId = folderId\n  }\n\n  perform() {\n    return this.oneDrive.children(this.folderId).then(response => {\n      return response.value.map(item => this.index(item))\n    }).then(episodes => {\n      return Promise.all(episodes).then(episodes => episodes.filter(episode => episode != null))\n    })\n  }\n\n  async index(item) {\n    if (item.folder == null || Number.isNaN(item.name)) {\n      return null\n    }\n\n    const files = await new IndexFiles(this.oneDrive, item.id).perform()\n\n    return {\n      type: ITEM_TYPES.EPISODE,\n      state: ITEM_STATES.INDEXED,\n      role: files.filter(file => file.type === FILE_TYPES.SOURCE).length > 0 ? ITEM_ROLES.LIBRARY : ITEM_ROLES.RECOMMENDED,\n      id: item.id,\n      episodeNumber: Number.parseInt(item.name),\n      files: files\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n\n  get folderId() {\n    return this._folderId\n  }\n}\n\nexport default IndexEpisodes\n","import { ITEM_ROLES, ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport IndexEpisodes from './IndexEpisodes'\n\nclass IndexSeasons {\n  constructor(oneDrive, folderId) {\n    this._oneDrive = oneDrive\n    this._folderId = folderId\n  }\n\n  perform() {\n    return this.oneDrive.children(this.folderId).then(response => {\n      return response.value.map(item => this.index(item))\n    }).then(seasons => {\n      return Promise.all(seasons).then(seasons => seasons.filter(season => season != null))\n    })\n  }\n\n  async index(item) {\n    if (item.folder == null || Number.isNaN(item.name)) {\n      return null\n    }\n\n    const episodes = await new IndexEpisodes(this.oneDrive, item.id).perform()\n\n    return {\n      type: ITEM_TYPES.SEASON,\n      state: ITEM_STATES.INDEXED,\n      role: episodes.filter(episode => episode.role === ITEM_ROLES.LIBRARY).length > 0 ? ITEM_ROLES.LIBRARY : ITEM_ROLES.RECOMMENDED,\n      id: item.id,\n      seasonNumber: Number.parseInt(item.name),\n      episodes: episodes\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n\n  get folderId() {\n    return this._folderId\n  }\n}\n\nexport default IndexSeasons\n","import { ITEM_ROLES, ITEM_STATES, ITEM_TYPES } from '../../constants'\n\nimport IndexSeasons from './IndexSeasons'\n\nclass IndexShows {\n  constructor(oneDrive) {\n    this._oneDrive = oneDrive\n  }\n\n  perform() {\n    return this.oneDrive.shows().then(response => {\n      return response.value.map(item => this.index(item))\n    })\n  }\n\n  async index(item) {\n    if (item.folder == null) {\n      return null\n    }\n\n    const seasons = await new IndexSeasons(this.oneDrive, item.id).perform()\n\n    return {\n      type: ITEM_TYPES.SHOW,\n      state: ITEM_STATES.INDEXED,\n      role: seasons.filter(season => season.role === ITEM_ROLES.LIBRARY).length > 0 ? ITEM_ROLES.LIBRARY : ITEM_ROLES.RECOMMENDED,\n      id: item.id,\n      name: item.name,\n      seasons: seasons\n    }\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n}\n\nexport default IndexShows\n","import OneDrive from '../drives/OneDrive'\n\nimport IndexMovies from './IndexMovies'\nimport IndexShows from './IndexShows'\n\nclass IndexItems {\n  constructor(accessToken) {\n    this._oneDrive = new OneDrive(accessToken)\n  }\n\n  perform() {\n    return Promise.all([\n      new IndexMovies(this.oneDrive).perform().then(movies => ({ movies: Promise.all(movies).then(movies => movies.filter(movie => movie != null)) })),\n      new IndexShows(this.oneDrive).perform().then(shows => ({ shows: Promise.all(shows).then(shows => shows.filter(show => show != null)) }))\n    ]).then(data => Object.assign({}, data[0], data[1]))\n  }\n\n  get oneDrive() {\n    return this._oneDrive\n  }\n}\n\nexport default IndexItems\n","const rp = require('request-promise')\n\nclass TMDb {\n  static config = {\n    qs: {\n      api_key: process.env.REACT_APP_TMDB_API_KEY,\n      language: 'en-US'\n    },\n    headers: {\n      'User-Agent': 'Request-Promise'\n    },\n    json: true\n  }\n\n  static base_uri = 'https://api.themoviedb.org/3'\n\n  async findMovie(query) {\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/search/movie`, qs: {...TMDb.config.qs, query}}).then(response => {\n      if (response.results.length < 1) {\n        return null\n      }\n\n      return response.results[0].id\n    })\n  }\n\n  async findShow(query) {\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/search/tv`, qs: {...TMDb.config.qs, query}}).then(response => {\n      if (response.results.length < 1) {\n        return null\n      }\n\n      return response.results[0].id\n    })\n  }\n\n  async movie(id) {\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/movie/${id}`})\n  }\n\n  async movieCredits(id) {\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/movie/${id}/credits`})\n  }\n\n  async movieVideos(id) {\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/movie/${id}/videos`})\n  }\n\n  async show(id) {\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${id}`})\n  }\n\n  async season(showId, seasonNumber) {\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${showId}/season/${seasonNumber}`})\n  }\n\n  async seasonCredits(showId, seasonNumber) {\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${showId}/season/${seasonNumber}/credits`})\n  }\n\n  async seasonVideos(showId, seasonNumber) {\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${showId}/season/${seasonNumber}/videos`})\n  }\n\n  async episode(showId, seasonNumber, episodeNumber) {\n    return rp({...TMDb.config, uri: `${TMDb.base_uri}/tv/${showId}/season/${seasonNumber}/episode/${episodeNumber}`})\n  }\n}\n\nexport default TMDb\n","import { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\n\nclass FetchMovie {\n  constructor(movie) {\n    this._movie = {...movie}\n    this._tmdb = new TMDb()\n  }\n\n  perform() {\n    return this.tmdb.findMovie(this.movie.name).then(tmdbId => {\n      this.movie.tmdbId = tmdbId\n\n      this.fetch()\n\n      return this.movie\n    })\n  }\n\n  async fetch() {\n    await Promise.all([\n      this.fetchDetails(),\n      this.fetchCredits()\n    ])\n  }\n\n  fetchDetails() {\n    return this.tmdb.movie(this.movie.tmdbId)\n      .then(response => {\n        this.movie.state = ITEM_STATES.FETCHED\n        this.movie.backdropUrl = `https://image.tmdb.org/t/p/original${response.backdrop_path}`\n        this.movie.overview = response.overview\n        this.movie.posterUrl = `https://image.tmdb.org/t/p/original${response.poster_path}`\n        this.movie.releaseDate = response.release_date\n        this.movie.runtime = response.runtime\n        this.movie.name = response.title\n        this.movie.affiliateLink = `https://www.amazon.com/s?k=${FetchMovie.parametrize(this.movie.name)}&i=movies-tv`\n        this.movie.trailerLink = `https://www.youtube.com/results?search_query=${FetchMovie.parametrize(this.movie.name)}+official+trailer`\n      })\n  }\n\n  fetchCredits() {\n    return this.tmdb.movieCredits(this.movie.tmdbId)\n      .then(response => {\n        this.movie.cast = response.cast.map(cast_member => ({\n          character: cast_member.character,\n          name: cast_member.name\n        }))\n        this.movie.crew = response.crew.map(crew_member => ({\n          job: crew_member.job,\n          name: crew_member.name\n        }))\n      })\n  }\n\n  get movie() {\n    return this._movie\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n\n  static parametrize(string) {\n    return string.toLowerCase().replace(/\\s/g, '+')\n  }\n}\n\nexport default FetchMovie\n","import { createSelector } from 'reselect'\n\nconst moviesSelector = state => state.movies\n\nexport const movieSelector = movieId => {\n  return createSelector(\n    moviesSelector,\n    movies => movies[movieId]\n  )\n}\n","import FetchMovie from '../services/fetching/FetchMovie'\n\nimport { movieSelector } from '../selectors/movies'\n\nexport const ADD_MOVIE = 'ADD_MOVIE'\nexport const CLEAR_MOVIES = 'CLEAR_MOVIES'\n\nexport const addMovie = movie => ({\n  type: ADD_MOVIE,\n  payload: movie\n})\n\nexport const clearMovies = () => ({\n  type: CLEAR_MOVIES\n})\n\nexport const fetchMovie = movieId => {\n  return (dispatch, getState) => {\n    const movie = movieSelector(movieId)(getState())\n    new FetchMovie(movie).perform().then(newMovie => {\n      newMovie.progress = movie.progress\n      dispatch(addMovie(newMovie))\n    }).catch(() => dispatch(fetchMovie(movieId)))\n  }\n}\n","import { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\n\nclass FetchEpisode {\n  constructor(show, season, episode) {\n    this._show = show\n    this._season = season\n    this._episode = episode\n    this._tmdb = new TMDb()\n  }\n\n  perform() {\n    return this.tmdb.episode(this.show.tmdbId, this.season.seasonNumber, this.episode.episodeNumber)\n      .then(response => {\n        this.episode.state = ITEM_STATES.FETCHED\n        this.episode.airDate = response.air_date\n        this.episode.name = response.name\n        this.episode.overview = response.overview\n        this.episode.affiliateLink = `https://www.amazon.com/s?k=${FetchEpisode.parametrize(this.show.name)}+${FetchEpisode.parametrize(this.season.name)}+episode+${this.episode.episodeNumber}&i=movies-tv`\n\n        return this.episode\n      })\n  }\n\n  get show() {\n    return this._show\n  }\n\n  get season() {\n    return this._season\n  }\n\n  get episode() {\n    return this._episode\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n\n  static parametrize(string) {\n    return string.toLowerCase().replace(/\\s/g, '+')\n  }\n}\n\nexport default FetchEpisode\n","import { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\n\nimport FetchEpisode from './FetchEpisode'\n\nclass FetchSeason {\n  constructor(show, season) {\n    this._show = show\n    this._season = season\n    this._tmdb = new TMDb()\n  }\n\n  async perform() {\n    await Promise.all([\n      this.fetchDetails(),\n      this.fetchCredits()\n    ])\n\n    return this.season\n  }\n\n  fetchDetails() {\n    return this.tmdb.season(this.show.tmdbId, this.season.seasonNumber)\n      .then(response => this.handleDetailsResponse(response))\n  }\n\n  fetchCredits() {\n    return this.tmdb.seasonCredits(this.show.tmdbId, this.season.seasonNumber)\n      .then(response => {\n        this.season.cast = response.cast.map(cast_member => ({\n          character: cast_member.character,\n          name: cast_member.name\n        }))\n        this.season.crew = response.crew.map(crew_member => ({\n          job: crew_member.job,\n          name: crew_member.name\n        }))\n      })\n  }\n\n  async handleDetailsResponse(response) {\n    this.season.state = ITEM_STATES.FETCHED\n    this.season.airDate = response.air_date\n    this.season.name = response.name\n    this.season.overview = response.overview\n    this.season.posterUrl = `https://image.tmdb.org/t/p/original${response.poster_path}`\n    this.season.affiliateLink = `https://www.amazon.com/s?k=${FetchSeason.parametrize(this.show.name)}+${FetchSeason.parametrize(this.season.name)}&i=movies-tv`\n    this.season.trailerLink = `https://www.youtube.com/results?search_query=${FetchSeason.parametrize(this.show.name)}+${FetchSeason.parametrize(this.season.name)}+official+trailer&i=movies-tv`\n    this.season.episodes = await this.mergeEpisodes(response.episodes)\n\n    return this.season\n  }\n\n  async mergeEpisodes(responseEpisodes) {\n    let episodes = []\n    if (this.season.episodes !== undefined) {\n      episodes = responseEpisodes.map(episode => ({\n        tmdbId: episode.id,\n        episodeNumber: episode.episode_number,\n        ...this.season.episodes.filter(indexedEpisode => indexedEpisode.episodeNumber === episode.episode_number).shift()\n      }))\n    } else {\n      episodes = responseEpisodes.map(episode => ({\n        tmdbId: episode.id,\n        episodeNumber: episode.episode_number\n      }))\n    }\n\n    return await Promise.all(episodes.map(episode => {\n      // TMDb only allows for up to 4 requests per second (https://developers.themoviedb.org/3/getting-started/request-rate-limiting)\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve(new FetchEpisode(this.show, this.season, episode).perform())\n        })\n      })\n    }))\n  }\n\n  get show() {\n    return this._show\n  }\n\n  get season() {\n    return this._season\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n\n  static parametrize(string) {\n    return string.toLowerCase().replace(/\\s/g, '+')\n  }\n}\n\nexport default FetchSeason\n","import { ITEM_STATES } from '../../constants'\n\nimport TMDb from '../databases/TMDb'\n\nimport FetchSeason from './FetchSeason'\n\nclass FetchShow {\n  constructor(show) {\n    this._show = {...show}\n    this._tmdb = new TMDb()\n  }\n\n  perform() {\n    return this.tmdb.findShow(this.show.name).then(tmdbId => {\n      this.show.tmdbId = tmdbId\n\n      this.fetch()\n\n      return this.show\n    })\n  }\n\n  async fetch() {\n    await this.tmdb.show(this.show.tmdbId)\n      .then(response => this.handleResponse(response))\n  }\n\n  async handleResponse(response) {\n    this.show.state = ITEM_STATES.FETCHED\n    this.show.backdropUrl = `https://image.tmdb.org/t/p/original${response.backdrop_path}`\n    this.show.firstAirDate = response.first_air_date\n    this.show.lastAirDate = response.last_air_date\n    this.show.name = response.name\n    this.show.overview = response.overview\n    this.show.posterUrl = `https://image.tmdb.org/t/p/original${response.poster_path}`\n    this.show.affiliateLink = `https://www.amazon.com/s?k=${FetchShow.parametrize(this.show.name)}`\n    this.show.seasons = await this.mergeSeasons(response.seasons)\n  }\n\n  async mergeSeasons(responseSeasons) {\n    let seasons = responseSeasons.map(season => ({\n      tmdbId: season.id,\n      seasonNumber: season.season_number,\n      ...this.show.seasons.filter(indexedSeason => indexedSeason.seasonNumber === season.season_number).shift()\n    }))\n\n    return await Promise.all(seasons.map(season => {\n      // TMDb only allows for up to 4 requests per second (https://developers.themoviedb.org/3/getting-started/request-rate-limiting)\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve(new FetchSeason(this.show, season).perform())\n        })\n      })\n    }))\n  }\n\n  get show() {\n    return this._show\n  }\n\n  get tmdb() {\n    return this._tmdb\n  }\n\n  static parametrize(string) {\n    return string.toLowerCase().replace(/\\s/g, '+')\n  }\n}\n\nexport default FetchShow\n","import { createSelector } from 'reselect'\n\nconst showsSelector = state => state.shows\n\nexport const showSelector = showId => {\n  return createSelector(\n    showsSelector,\n    shows => shows[showId]\n  )\n}\n","import FetchShow from '../services/fetching/FetchShow'\n\nimport { showSelector } from '../selectors/shows'\n\nexport const ADD_SHOW = 'ADD_SHOW'\nexport const CLEAR_SHOWS = 'CLEAR_SHOWS'\n\nexport const addShow = show => ({\n  type: ADD_SHOW,\n  payload: show\n})\n\nexport const clearShows = () => ({\n  type: CLEAR_SHOWS\n})\n\nexport const fetchShow = showId => {\n  return (dispatch, getState) => {\n    const show = showSelector(showId)(getState())\n    new FetchShow(show).perform().then(newShow => {\n      newShow.seasons.forEach(season => {\n        season.episodes.forEach(episode => {\n          const oldSeason = show.seasons.filter(oldSeason => oldSeason.id === season.id)\n          if (oldSeason != null) {\n            const oldEpisode = oldSeason.episodes.filter(oldEpisode => oldEpisode.id === episode.id)\n            if (oldEpisode != null) {\n              episode.progress = oldEpisode.progress\n            }\n          }\n        })\n      })\n      dispatch(addShow(newShow))\n    }).catch(() => dispatch(fetchShow(showId)))\n  }\n}\n","import IndexItems from '../services/indexing/IndexItems'\n\nimport { logIn } from './auth'\nimport { addMovie, clearMovies, fetchMovie } from './movies'\nimport { addShow, clearShows, fetchShow } from './shows'\n\nexport const INDEX_BEGIN = 'INDEX_BEGIN'\nexport const INDEX_SUCCESS = 'INDEX_SUCCESS'\nexport const INDEX_FAILURE = 'INDEX_FAILURE'\n\nexport const index = () => {\n  return (dispatch, getState) => {\n    dispatch(indexBegin())\n\n    new IndexItems(getState().auth.token).perform().then(({ movies, shows }) => {\n      const movieProgress = {}\n      Object.values(getState().movies).forEach(movie => movieProgress[movie.id] = movie.progress)\n      dispatch(clearMovies())\n      movies.then(moviesArr => {\n        moviesArr.forEach(movie => {\n          movie.progress = movieProgress[movie.id]\n          dispatch(addMovie(movie))\n          dispatch(fetchMovie(movie.id))\n        })\n      })\n\n      const episodeProgress = {}\n      Object.values(getState().shows).forEach(show => {\n        show.seasons.forEach(season => {\n          season.episodes.forEach(episode => episodeProgress[episode.id] = episode.progress)\n        })\n      })\n      dispatch(clearShows())\n      shows.then(showsArr => {\n        showsArr.forEach(show => {\n          show.seasons.forEach(season => {\n            season.episodes.forEach(episode => episode.progress = episodeProgress[episode.id])\n          })\n          dispatch(addShow(show))\n          dispatch(fetchShow(show.id))\n        })\n      })\n\n      dispatch(indexSuccess())\n    }).catch(error => {\n      dispatch(indexFailure(error))\n\n      if (error.statusCode === 401) {\n        dispatch(logIn())\n      }\n    })\n  }\n}\n\nconst indexBegin = () => ({\n  type: INDEX_BEGIN\n})\n\nconst indexSuccess = () => ({\n  type: INDEX_SUCCESS\n})\n\nconst indexFailure = error => ({\n  type: INDEX_FAILURE,\n  payload: error\n})\n","import MicrosoftAuth from '../services/auth/MicrosoftAuth'\n\nimport { index } from './indexing'\n\nexport const LOG_IN_BEGIN = 'LOG_IN_BEGIN'\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'\n\nexport const logIn = () => {\n  return dispatch => {\n    dispatch(logInBegin())\n\n    new MicrosoftAuth().perform().then(auth => {\n      dispatch(logInSuccess(auth))\n      dispatch(index())\n    }).catch(error => dispatch(logInFailure(error)))\n  }\n}\n\nconst logInBegin = () => ({\n  type: LOG_IN_BEGIN\n})\n\nconst logInSuccess = auth => ({\n  type: LOG_IN_SUCCESS,\n  payload: auth\n})\n\nconst logInFailure = error => ({\n  type: LOG_IN_FAILURE,\n  payload: error\n})\n","import { LOG_IN_BEGIN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../actions/auth'\n\nconst initialState = {\n  token: null,\n  user: null,\n  loading: false,\n  error: null\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case LOG_IN_BEGIN:\n    return {\n      ...state,\n      loading: true,\n      error: null\n    }\n  case LOG_IN_SUCCESS:\n    return {\n      ...state,\n      token: action.payload.token,\n      user: action.payload.user,\n      loading: false\n    }\n  case LOG_IN_FAILURE:\n    return {\n      ...state,\n      loading: false,\n      error: action.payload\n    }\n  default:\n    return state\n  }\n}\n","import { INDEX_BEGIN, INDEX_SUCCESS, INDEX_FAILURE } from '../actions/indexing'\n\nconst initialState = {\n  loading: false,\n  error: null\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case INDEX_BEGIN:\n    return {\n      ...state,\n      loading: true,\n      error: null\n    }\n  case INDEX_SUCCESS:\n    return {\n      ...state,\n      loading: false\n    }\n  case INDEX_FAILURE:\n    return {\n      ...state,\n      loading: false,\n      error: action.payload\n    }\n  default:\n    return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport auth from './auth'\nimport indexing from './indexing'\nimport movies from './movies'\nimport shows from './shows'\n\nconst rootReducer = combineReducers({\n  auth: persistReducer({\n    key: 'auth',\n    storage: storage,\n    whitelist: ['token', 'user'],\n    debug: process.env.NODE_ENV === 'development'\n  }, auth),\n  indexing,\n  movies,\n  shows\n})\n\nexport default persistReducer({\n  key: 'root',\n  storage: storage,\n  whitelist: ['movies', 'shows'],\n  debug: process.env.NODE_ENV === 'development'\n}, rootReducer)\n","import { ADD_MOVIE, CLEAR_MOVIES } from '../actions/movies'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n  case ADD_MOVIE:\n    return {\n      ...state,\n      [action.payload.id]: action.payload\n    }\n  case CLEAR_MOVIES:\n    return {}\n  default:\n    return state\n  }\n}\n","import { ADD_SHOW, CLEAR_SHOWS } from '../actions/shows'\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n  case ADD_SHOW:\n    return {\n      ...state,\n      [action.payload.id]: action.payload\n    }\n  case CLEAR_SHOWS:\n    return {}\n  default:\n    return state\n  }\n}\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport persistedReducer from './reducers'\n\nexport default createStore(\n  persistedReducer,\n  applyMiddleware(thunk)\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React, { Component } from 'react'\n// import './ForYou.scss'\n\nclass ForYou extends Component {\n  render() {\n    return (\n      <div className='ForYou'>\n      </div>\n    )\n  }\n}\n\nexport default ForYou\n","import React, { Component } from 'react'\n// import './Movie.scss'\n\n// import Caption from '../../models/Caption'\n// import { default as MovieModel } from '../../models/Movie'\n// import Source from '../../models/Source'\n// import Video from '../../models/Video'\n\nclass Movie extends Component {\n  render({ match }) {\n    // const video = new Video(\n    //   'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg',\n    //   [\n    //     new Source('https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4', 'video/mp4', 576),\n    //     new Source('https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-720p.mp4', 'video/mp4', 720),\n    //     new Source('https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-1080p.mp4', 'video/mp4', 1080)\n    //   ],\n    //   [\n    //     new Caption('English', 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt', 'en'),\n    //     new Caption('Français', 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', 'fr')\n    //   ]\n    // )\n    // // const movie = new MovieModel(299537, video).fetch()\n    // const movie = new MovieModel(match.params.id, video).fetch()\n    // console.log(movie)\n    console.log(match.params.id)\n\n    return (\n      <div className=\"Movie\">\n      </div>\n    )\n  }\n}\n\nexport default Movie\n","import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\n// import './Movies.scss'\n\nimport Movie from './Movies/Movie'\n\nclass Movies extends Component {\n  render({ match }) {\n    return (\n      <div className='Movies'>\n        <Route path={`${match.path}/:id`} component={Movie}/>\n        <Route\n          exact\n          path={match.path}\n          render={() => <h3>Please select a movie.</h3>} />\n      </div>\n    )\n  }\n}\n\nexport default Movies\n","import React, { Component } from 'react'\n// import './Shows.scss'\n\nclass Shows extends Component {\n  render() {\n    return (\n      <div className='Shows'>\n      </div>\n    )\n  }\n}\n\nexport default Shows\n","import React, { Component } from 'react'\n// import './Find.scss'\n\nclass Find extends Component {\n  render() {\n    return (\n      <div className='Find'>\n      </div>\n    )\n  }\n}\n\nexport default Find\n","import React, { Component } from 'react'\n// import './Welcome.scss'\n\nclass Welcome extends Component {\n  render() {\n    return (\n      <div className='Welcome'>\n      </div>\n    )\n  }\n}\n\nexport default Welcome\n","import React, { Component } from 'react'\n// import './NotFound.scss'\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div className='NotFound'>\n      </div>\n    )\n  }\n}\n\nexport default NotFound\n","import React, { Component } from 'react'\n\nclass PlyrCaption extends Component {\n  render() {\n    return (\n      <track\n        kind='captions'\n        label={this.props.caption.information}\n        src={this.props.caption.url}\n        srcLang={this.props.caption.srclang || 'en'}\n        default={this.props.key === 0} />\n    )\n  }\n}\n\nexport default PlyrCaption\n","import React, { Component } from 'react'\n\nclass PlyrContinue extends Component {\n  continueWatching() {\n    document.querySelector('button#continue').style.display = 'none'\n    this.props.parent.player.play()\n    this.props.parent.player.currentTime = this.props.parent.props.item.progress\n  }\n\n  render() {\n    if (this.props.parent.props.item.progress === 0) {\n      return null\n    }\n\n    return (\n      <button\n        id='continue'\n        onClick={this.continueWatching.bind(this)}>\n        Continue watching\n      </button>\n    )\n  }\n}\n\nexport default PlyrContinue\n","import React, { Component } from 'react'\n\nclass PlyrSource extends Component {\n  render() {\n    return (\n      <source\n        src={this.props.source.url}\n        type={this.props.source.mimeType}\n        size={this.props.source.information} />\n    )\n  }\n}\n\nexport default PlyrSource\n","import React, { Component } from 'react'\nimport Plyr from 'plyr'\nimport './PlyrPlayer.scss'\n\nimport PlyrCaption from './PlyrPlayer/PlyrCaption'\nimport PlyrContinue from './PlyrPlayer/PlyrContinue'\nimport PlyrSource from './PlyrPlayer/PlyrSource'\n\nclass PlyrPlayer extends Component {\n  componentDidMount() {\n    this.player = new Plyr('#player', {\n      debug: process.env.NODE_ENV === 'development'\n    })\n    this.player.on('play', () => {\n      if (document.querySelector('button#continue')) {\n        document.querySelector('button#continue').style.display = 'none'\n      }\n    })\n    this.player.on('timeupdate', event => {\n      if (event.detail.plyr.currentTime !== 0) {\n        this.props.item.progress = event.detail.plyr.currentTime\n      }\n    })\n  }\n\n  render() {\n    if (this.props.item.files.filter(file => file.type === 'source').length === 0) {\n      return null\n    }\n    console.log(this.props.item.files.filter(file => file.type === 'source')[0].url)\n\n    return (\n      <div className='PlyrPlayer'>\n        <video\n          poster={this.props.item.backdropUrl}\n          src={this.props.item.files.filter(file => file.type === 'source')[0].url}\n          id='player' crossOrigin='true' playsInline controls>\n          {this.props.item.files.filter(file => file.type === 'source').map((source, index) => {\n            return (<PlyrSource source={source} key={index} />)\n          })}\n          {this.props.item.files.filter(file => file.type === 'caption').map((caption, index) => {\n            return (<PlyrCaption caption={caption} key={index} />)\n          })}\n          <a href={this.props.item.files.filter(file => file.type === 'source')[0].src} download>Download</a>\n        </video>\n        <PlyrContinue parent={this} />\n      </div>\n    )\n  }\n}\n\nexport default PlyrPlayer\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { connect } from 'react-redux'\n// import logo from './logo.svg'\n// import './App.scss'\n\nimport { logIn } from './actions/auth'\nimport { index } from './actions/indexing'\n\nimport MicrosoftAuth from './services/auth/MicrosoftAuth'\n\nimport ForYou from './scenes/ForYou'\nimport Movies from './scenes/Movies'\nimport Shows from './scenes/Shows'\nimport Find from './scenes/Find'\nimport Welcome from './scenes/Welcome'\nimport NotFound from './scenes/NotFound'\n\nimport PlyrPlayer from './components/PlyrPlayer'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // this required for the login popup to close (https://github.com/AzureAD/microsoft-authentication-library-for-js/issues/174)\n    new MicrosoftAuth()\n  }\n\n  render() {\n    if (this.props.user) {\n      let player = null\n      if (Object.values(this.props.movies).filter(movie => movie.role === 'library').length > 0) {\n        player = <PlyrPlayer item={Object.values(this.props.movies).filter(movie => movie.role === 'library')[0]} />\n      }\n\n      return (\n        <div className='App'>\n          <button onClick={this.props.index}>Index</button>\n\n          {player}\n\n          <Router>\n            <Switch>\n              <Route path='/' exact component={ForYou} />\n              <Route path='/movies' component={Movies} />\n              <Route path='/shows' component={Shows} />\n              <Route path='/find' component={Find} />\n              <Route component={NotFound} />\n            </Switch>\n          </Router>\n        </div>\n      )\n    } else {\n      return (\n        <div className='App'>\n          <button onClick={this.props.logIn}>Launch</button>\n\n          <Router>\n            <Switch>\n              <Route path='/' exact component={Welcome} />\n              <Route component={NotFound} />\n            </Switch>\n          </Router>\n        </div>\n      )\n    }\n  }\n}\n\nexport default connect(\n  state => ({\n    user: state.auth.user,\n    movies: state.movies\n  }),\n  { logIn, index }\n)(App)\n","import React, { Component } from 'react'\n// import './Loading.scss'\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className='Loading'>\n      </div>\n    )\n  }\n}\n\nexport default Loading\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport { persistStore } from 'redux-persist'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport Loading from './components/Loading'\n\nimport './index.scss'\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<Loading />} persistor={persistStore(store)}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}